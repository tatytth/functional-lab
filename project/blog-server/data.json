[
    {
    "id": 160495,
    "date": "2017-10-10T11:30:15",
    "date_gmt": "2017-10-10T18:30:15",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160495"
    },
    "modified": "2017-10-08T21:51:58",
    "modified_gmt": "2017-10-09T04:51:58",
    "slug": "how-to-set-up-airbrake-error-monitoring-for-your-javascript-app",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/how-to-set-up-airbrake-error-monitoring-for-your-javascript-app/",
    "title": {
    "rendered": "How to Set Up Airbrake Error Monitoring for Your JavaScript App"
    },
    "content": {
    "rendered": "<p class=\"wp-special\"><em>This article was sponsored by <a href=\"http://synd.co/2wyaRGy\" rel=\"nofollow\">Airbrake</a>. Thank you for supporting the partners who make SitePoint possible.</em></p>\n<p>We&#8217;re all very careful about testing our code before putting it out into a production environment, right? We use test-driven development or build out elegant suites of unit tests, functional tests, and integration tests. We run our products through all the likely environments where it may be deployed repeatedly every time we make a change to our code. We test every possible path a user could follow on every conceivable browser.</p>\n<p>Right?</p>\n<p>Well, ok, none of us is perfect. But at least our users are always diligent about reporting every error they encounter, and providing detailed information about exactly how to reproduce those errors so they&#8217;re easy to track down and fix. </p>\n<p>Right?</p>\n<p>Yeah, I didn&#8217;t think so.</p>\n<h2 id=\"errormonitoringtotherescue\">Error Monitoring to the Rescue!</h2>\n<p>Thankfully there are services out there to help us diagnose and resolve issues that may have slipped through the infinitesimal cracks in our diligent quality testing procedures. </p>\n<p>I&#8217;m talking about remote error monitoring services. If you haven&#8217;t heard of them before, remote error monitoring services can track and report on actual errors that users encounter in real time as they happen, before the user even has a chance to file a vague or misleading bug report. </p>\n<p>In addition, they can provide you with a range of useful details about how the error came about: what browser version the user was running, what account was logged in, what operating system was being used, any session data, a backtrace of the error itself, as well as any custom tags you might have inserted into your code to help identify issues.</p>\n<h2 id=\"gettingstartedwitherrormonitoring\">Getting Started With Error Monitoring</h2>\n<p>There are a number of services and options in the market, but a good comprehensive one is <a href=\"http://synd.co/2wyaRGy\" rel=\"nofollow\">Airbrake.io</a>. They&#8217;ve been around for a long time in internet years, so you may remember them as Hoptoad back before they changed their name in 2011. </p>\n<p>Airbrake also supports a very broad range of back-end and front end languages and environments from Ruby and PHP to .NET and Node.js. They also offer native integration with most of the popular code management and deployment services such as GitHib, JIRA, Bitbucket, and Slack. It&#8217;s likely that whatever you&#8217;re working with, they have the tools you need to get started quickly and easily. Their reporting interface is also clean and easy to navigate, so you can start generating actionable information from your deployed production code quickly. </p>\n<p>Implementing the Airbrake.io code into your product is straightforward. To get started, you can create an account at Airbrake.io that&#8217;s free for the first 14 days while you kick the tires, with no credit card required during the trial period.</p>\n<p>When you create your first project, you&#8217;ll be provided with a range of options with pre-written integration code in over 20 languages. As an example, let&#8217;s say we want to use JavaScript end-to-end, and have an Express based Node.js api service on the back end. </p>\n<h2 id=\"monitoringanexpressapp\">Monitoring an Express App</h2>\n<p>Let&#8217;s set up a quick example to show how easy integrating error monitoring with Airbrake can be. Assuming we already have node installed, in the terminal we can create a simple Express app to monitor using the Express Generator, which we can install with yarn or npm:</p>\n<pre><code class=\"bash language-bash\">yarn global add express-generator\r\n</code></pre>\n<p>We can then run it to create a bare-bones Express app:</p>\n<pre><code class=\"bash language-bash\">express sample-app\r\n</code></pre>\n<p>Then <code>cd</code> into the directory that was created and run <code>yarn</code> (or <code>npm install</code> if you prefer) to install our dependencies</p>\n<pre><code class=\"bash language-bash\">cd sample-app\r\nyarn\r\n</code></pre>\n<p>Then run <code>node bin/www</code> to start our server, optionally setting a port with <code>PORT=####</code> at the beginning of the command. (If we don&#8217;t specify a port, node will default to port 3000.)</p>\n<pre><code class=\"bash language-bash\">node bin/www\r\n</code></pre>\n<p>Now if we navigate to <code>http://localhost:3000</code> in the browser, we&#8217;ll see a basic Express app that just says &#8220;Welcome to Express.&#8221;</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507523928express.png\" alt=\"Express\" width=\"962\" height=\"500\" class=\"aligncenter size-full wp-image-160500\" /></p>\n<p>You can either add Airbrake to your dependencies or use yarn or npm to install airbrake. We&#8217;ll already have a <code>package.json</code> file in our Express app, so we can simply add a line at the bottom of our dependencies specifying airbrake and a target version:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"name\": \"sample-app\",\r\n  \"version\": \"0.0.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"start\": \"node ./bin/www\"\r\n  },\r\n  \"dependencies\": {\r\n    \"body-parser\": \"~1.17.1\",\r\n    \"cookie-parser\": \"~1.4.3\",\r\n    \"debug\": \"~2.6.3\",\r\n    \"express\": \"~4.15.2\",\r\n    \"jade\": \"~1.11.0\",\r\n    \"morgan\": \"~1.8.1\",\r\n    \"serve-favicon\": \"~2.4.2\",\r\n    \"airbrake\": \"^2.1.0\"\r\n  }\r\n}\r\n</code></pre>\n<p>Of course current version numbers and specific dependencies may have changed in this file, but the concept is the same. They key is to add airbrake, in this case as the last line of the dependencies. Once this file is updated, we can just run <code>yarn</code> (or <code>npm install</code>) again in our main app directory to update our app.</p>\n<pre><code class=\"bash language-bash\">yarn\r\n</code></pre>\n<p>Now all we need to do is add the sample Express airbrake code near the top of our app source file <code>app.js</code>, after our <code>app</code> variable has been defined. Airbrake can take advantage of the built-in error handling provided by Express versions as early as 2.x.</p>\n<pre><code class=\"JavaScript language-JavaScript\">var airbrake = require('airbrake').createClient(\r\n  '&lt;YOUR_AIRBRAKE_PROJECT_ID&gt;',\r\n    '&lt;YOUR_AIRBRAKE_API_KEY&gt;'\r\n);\r\napp.use(airbrake.expressHandler());\r\n</code></pre>\n<p>Airbrake will provide you with a project id and an api key, and will include them in the sample code they provide once you&#8217;ve logged into your account. Now the errors that would normally be caught by Express, as well as any other errors your code may generate, will be caught and tracked by Airbrake. </p>\n<h2 id=\"checkingourerrormonitoring\">Checking Our Error Monitoring</h2>\n<p>For example, let&#8217;s see what happens when JavaScript throws an error. We can add code to throw a <code>new Error</code> into the default route handler in our <code>routes/index.js</code> file to trigger a JavaScript error, and see how it is tracked:</p>\n<pre><code class=\"JavaScript language-JavaScript\">var express = require('express');\r\nvar router = express.Router();\r\n/* GET home page. */\r\nrouter.get('/', function(req, res, next) {\r\n  res.render('index', { title: 'Express' });\r\n  throw new Error('I am an uncaught exception');\r\n});\r\nmodule.exports = router;\r\n</code></pre>\n<p>If this were a regular production site, the first thing we might notice when the homepage generates that error is an email message from Airbrake, or possibly a notification in Slack or some other supported alert system. Airbrake lets you easily customize how frequently alerts of various kinds are sent, where they should go, and what events should trigger a notification. </p>\n<p>With the default account settings, we would receive an email at the developer&#8217;s account with an overview of the error that occurred. In this case, it would include a warning that this is the first time this error has been encountered.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507523976email-1024x875.png\" alt=\"Email\" width=\"1024\" height=\"875\" class=\"aligncenter size-large wp-image-160501\" /></p>\n<p>Next we can visit our Airbrake dashboard and see the error reflected in our reports, along with a lot of useful information including the custom message we created, when the error occurred, where it came from, the specific url and host, and how many times it&#8217;s happened. (Just once so far.)</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507523990dashboard-1024x630.png\" alt=\"Dashboard\" width=\"1024\" height=\"630\" class=\"aligncenter size-large wp-image-160502\" /></p>\n<p>Visiting the &#8220;Occurrences&#8221; tab on the dashboard will show us a backtrace from our server code to help us debug when and where the error might have been triggered in our code. </p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507524005occurrences-1024x987.png\" alt=\"Occurrences\" width=\"1024\" height=\"987\" class=\"aligncenter size-large wp-image-160503\" /></p>\n<p>Expanding the &#8220;Environment&#8221; section of the tab will show us a number of useful details about our server and the processes that were running when the error occurred.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507524025environment-980x1024.png\" alt=\"Environment\" width=\"980\" height=\"1024\" class=\"aligncenter size-large wp-image-160504\" /></p>\n<p>More information can be found by expanding the &#8220;Context&#8221; section of the tab, telling us about the operating environment our scripts were running in when the error happened.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507524039context-1024x739.png\" alt=\"Context\" width=\"1024\" height=\"739\" class=\"aligncenter size-large wp-image-160505\" /></p>\n<h2 id=\"yourappsnewbestfriend\">Your App&#8217;s New Best Friend</h2>\n<p>Imagine that level of error coverage spread out over your entire user base, tracking every error on your app your users encounter in a production environment, and tabulating the results. </p>\n<p>You can easily see how helpful this kind of information might be in a real-world production environment where users aren&#8217;t seeing what you want them to see. And thanks to the complete and detailed reports, think about how much time, money, and frustration you could save. </p>\n<p>With <a href=\"http://synd.co/2wyaRGy\">Airbrake&#8217;s remote error tracking</a>, you won&#8217;t have to wait for your friends to tell you when something&#8217;s wrong with your app. You&#8217;ll already know.</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p class=\"wp-special\"><em>This article was sponsored by <a href=\"http://synd.co/2wyaRGy\" rel=\"nofollow\">Airbrake</a>. Thank you for supporting the partners who make SitePoint possible.</em></p>\n<p>We&#8217;re all very careful about testing our code before putting it out into a production environment, right? We use test-driven development or build out elegant suites of unit tests, functional tests, and integration tests. We run our products through all the likely environments where it may be deployed repeatedly every time we make a change to our code. We test every possible path a user could follow on every conceivable browser.</p>\n<p>Right?</p>\n<p>Well, ok, none of us is perfect. But at least our users are always diligent about reporting every error they encounter, and providing detailed information about exactly how to reproduce those errors so they&#8217;re easy to track down and fix. </p>\n<p>Right?</p>\n<p>Yeah, I didn&#8217;t think so.</p>\n<h2 id=\"errormonitoringtotherescue\">Error Monitoring to the Rescue!</h2>\n<p>Thankfully there are services out there to help us diagnose and resolve issues that may have slipped through the infinitesimal cracks in our diligent quality testing procedures. </p>\n<p>I&#8217;m talking about remote error monitoring services. If you haven&#8217;t heard of them before, remote error monitoring services can track and report on actual errors that users encounter in real time as they happen, before the user even has a chance to file a vague or misleading bug report. </p>\n<p>In addition, they can provide you with a range of useful details about how the error came about: what browser version the user was running, what account was logged in, what operating system was being used, any session data, a backtrace of the error itself, as well as any custom tags you might have inserted into your code to help identify issues.</p>\n<h2 id=\"gettingstartedwitherrormonitoring\">Getting Started With Error Monitoring</h2>\n<p>There are a number of services and options in the market, but a good comprehensive one is <a href=\"http://synd.co/2wyaRGy\" rel=\"nofollow\">Airbrake.io</a>. They&#8217;ve been around for a long time in internet years, so you may remember them as Hoptoad back before they changed their name in 2011. </p>\n<p>Airbrake also supports a very broad range of back-end and front end languages and environments from Ruby and PHP to .NET and Node.js. They also offer native integration with most of the popular code management and deployment services such as GitHib, JIRA, Bitbucket, and Slack. It&#8217;s likely that whatever you&#8217;re working with, they have the tools you need to get started quickly and easily. Their reporting interface is also clean and easy to navigate, so you can start generating actionable information from your deployed production code quickly. </p>\n<p>Implementing the Airbrake.io code into your product is straightforward. To get started, you can create an account at Airbrake.io that&#8217;s free for the first 14 days while you kick the tires, with no credit card required during the trial period.</p>\n<p>When you create your first project, you&#8217;ll be provided with a range of options with pre-written integration code in over 20 languages. As an example, let&#8217;s say we want to use JavaScript end-to-end, and have an Express based Node.js api service on the back end. </p>\n<h2 id=\"monitoringanexpressapp\">Monitoring an Express App</h2>\n<p>Let&#8217;s set up a quick example to show how easy integrating error monitoring with Airbrake can be. Assuming we already have node installed, in the terminal we can create a simple Express app to monitor using the Express Generator, which we can install with yarn or npm:</p>\n<pre><code class=\"bash language-bash\">yarn global add express-generator\r\n</code></pre>\n<p>We can then run it to create a bare-bones Express app:</p>\n",
    "protected": false
    },
    "author": 71788,
    "featured_media": 160508,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407
    ],
    "tags": [
    11202,
    9397,
    9553,
    6298
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160495"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/71788"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160495"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160495/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160508"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160495"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160495"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160495"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160482,
    "date": "2017-10-09T09:00:09",
    "date_gmt": "2017-10-09T16:00:09",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160482"
    },
    "modified": "2017-10-09T02:15:48",
    "modified_gmt": "2017-10-09T09:15:48",
    "slug": "javascript-functions-that-define-and-rewrite-themselves",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/javascript-functions-that-define-and-rewrite-themselves/",
    "title": {
    "rendered": "JavaScript Functions That Define and Rewrite Themselves"
    },
    "content": {
    "rendered": "<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507022903jsninjacover-only-thumb-228x300.png\" alt=\"\" width=\"228\" height=\"300\" class=\"alignleft size-medium wp-image-160439\" /></p>\n<p><em>The following is a short extract from our new book, <a href=\"https://www.sitepoint.com/premium/books/javascript-novice-to-ninja-2nd-edition\">JavaScript: Novice to Ninja, 2nd Edition</a>, written by Darren Jones. It&#8217;s the ultimate beginner&#8217;s guide to JavaScript. SitePoint Premium members get access with their membership, or you can buy a copy in stores worldwide.</em></p>\n<p>The dynamic nature of JavaScript means that a function is able to not only call itself, but define itself, and even redefine itself. This is done by assigning an anonymous function to a variable that has <em>the same name as the function</em>.</p>\n<p>Consider the following function:</p>\n<pre><code class=\"javascript language-javascript\">function party(){\r\nconsole.log(&#39;Wow this is amazing!&#39;);\r\nparty = function(){\r\n    console.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n}\r\n            </code></pre>\n<p>This logs a message in the console, then redefines itself to log a different message in the console. When the function has been called once, it will be as if it was defined like this:</p>\n<pre><code class=\"javascript language-javascript\">function party() {\r\nconsole.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n            </code></pre>\n<p>Every time the function is called after the first time, it will log the message “Been there, got the T-Shirt”:</p>\n<pre><code class=\"javascript language-javascript\">party();\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n\r\nparty();\r\n&lt;&lt; &#39;Been there, got the T-Shirt&#39;\r\n\r\nparty();\r\n&lt;&lt; &#39;Been there, got the T-Shirt&#39;\r\n            </code></pre>\n<p>If the function is also assigned to another variable, this variable will maintain the original function definition and not be rewritten. This is because the original function is assigned to a variable, then within the function, a variable with the same name as the function is assigned to a different function. You can see an example of this if we create a variable called <code>beachParty</code> that is assigned to the <code>party()</code> function <em>before</em> it is called for the first time and redefined:</p>\n<pre><code class=\"javascript language-javascript\">function party(){\r\nconsole.log(&#39;Wow this is amazing!&#39;);\r\nparty = function(){\r\n    console.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n}\r\n\r\nconst beachParty = party; // note that the party function has not been invoked\r\n\r\nbeachParty(); // the party() function has now been redefined, even though it hasn&#39;t been called explicitly\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n\r\nparty(); \r\n&lt;&lt; &#39;Been there, got the T-Shirt&#39;\r\n\r\nbeachParty(); // but this function hasn&#39;t been redefined\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n\r\nbeachParty(); // no matter how many times this is called it will remain the same\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n            </code></pre>\n<div class=\"box warning\">\n<h4>Losing Properties</h4>\n<div class=\"body\">\n<p>Be careful: if any properties have previously been set on the function, these will be lost when the function redefines itself. In the previous example, we can set a <code>music</code> property, and see that it no longer exists after the function has been invoked and redefined:</p>\n<pre><code class=\"javascript language-javascript\">function party() {\r\nconsole.log(&#39;Wow this is amazing!&#39;);\r\nparty = function(){\r\nconsole.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n}\r\n\r\nparty.music = &#39;Classical Jazz&#39;; // set a property of the function\r\n\r\nparty();\r\n&lt;&lt; &quot;Wow this is amazing!&quot;\r\n\r\nparty.music; // function has now been redefined, so the property doesn&#39;t exist\r\n&lt;&lt; undefined</code></pre>\n</p></div>\n</p></div>\n<p>This is called the <strong>Lazy Definition Pattern</strong> and is often used when some initialization code is required the first time it’s invoked. This means the initialization can be done the first time it’s called, then the function can be redefined to what you want it to be for every subsequent invocation.  </p>\n<h3 id=\"init-time-branching\">Init-Time Branching</h3>\n<p>This technique can be used with the feature detection that we discussed in the last chapter to create functions that rewrite themselves, known as <strong>init-time branching</strong>. This enables the functions to work more effectively in the browser, and avoid checking for features every time they’re invoked.</p>\n<p>Let’s take the example of our fictional <code>unicorn</code> object that’s yet to have full support in all browsers. In the last chapter, we looked at how we can use feature detection to check if this is supported. Now we can go one step further: we can define a function based on whether certain methods are supported. This means we only need to check for support the first time the function is called:</p>\n<pre><code class=\"javascript language-javascript\">function ride(){\r\n    if (window.unicorn) { \r\n        ride = function(){\r\n        // some code that uses the brand new and sparkly unicorn methods\r\n        return &#39;Riding on a unicorn is the best!&#39;;\r\n    }\r\n    } else {\r\n        ride = function(){\r\n        // some code that uses the older pony methods\r\n        return &#39;Riding on a pony is still pretty good&#39;;\r\n    }\r\n    }\r\n    return ride();\r\n}\r\n            </code></pre>\n<p>After we’ve checked whether the <code>window.unicorn</code> object exists (by checking to see if it’s truthy), we’ve rewritten the <code>ride()</code> function according to the outcome. Right at the end of the function, we call it again so that the rewritten function is now invoked, and the relevant value returned. One thing to be aware of is that the function is invoked twice the first time, although it becomes more efficient each subsequent time it’s invoked. Let’s take a look at how it works:</p>\n<pre><code class=\"javascript language-javascript\">ride(); // the function rewrites itself, then calls itself\r\n&lt;&lt; &#39;Riding on a pony is still pretty good&#39;\r\n            </code></pre>\n<p>Once the function has been invoked, it’s rewritten based on the browser’s capabilities. We can check this by inspecting the function without invoking it:</p>\n<pre><code class=\"javascript language-javascript\">ride\r\n&lt;&lt; function ride() {\r\n    return &#39;Riding on a pony is still pretty good&#39;;\r\n    }\r\n            </code></pre>\n<p>This can be a useful pattern to initialize functions the first time they’re called, optimizing them for the browser being used.</p>\n<h2 id=\"recursive-functions\">Recursive Functions</h2>\n<p>A <strong>recursive function</strong> is one that invokes itself until a certain condition is met. It’s a useful tool to use when iterative processes are involved. A common example is a function that calculates the <a href=\"http://en.wikipedia.org/wiki/Factorial\">factorial</a> of a number:</p>\n<pre><code class=\"javascript language-javascript\">function factorial(n) {\r\nif (n === 0) {\r\n    return 1;\r\n} else {\r\n    return n * factorial(n - 1);\r\n}\r\n}\r\n            </code></pre>\n<p>This function will return <code>1</code> if <code>0</code> is provided as an argument (0 factorial is 1), otherwise it will multiply the argument by the result of invoking itself with an argument of one less. The function will continue to invoke itself until finally the argument is <code>0</code> and <code>1</code> is returned. This will result in a multiplication of 1, 2, 3 and all the numbers up to the original argument.</p>\n<p>Another example from the world of mathematics is the <a href=\"http://en.wikipedia.org/wiki/Collatz_conjecture\">Collatz conjecture</a>. This is a problem that is simple to state, but, so far, has not been solved. It involves taking any positive integer and following these rules:</p>\n<ul>\n<li>\n<p>If the number is even, divide it by two</p>\n</li>\n<li>\n<p>If the number is odd, multiply it by three and add one</p>\n</li>\n</ul>\n<p>For example, if we start with the number 18, we would have the following sequence:</p>\n<p>18, 9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1, &#8230;</p>\n<p>As you can see, the sequence becomes stuck in a loop at the end, cycling through “4,2,1”. The Collatz Conjecture states that every positive integer will create a sequence that finishes in this loop. This has been verified for all numbers up to 5 × 2⁶⁰, but there is no proof it will continue to be true for all the integers higher than this. To test the conjecture, we can write a function that uses recursion to keep invoking the function until it reaches a value of <code>1</code> (because we want our function to avoid being stuck in a recursive loop at the end!):</p>\n<pre><code class=\"javascript language-javascript\">function collatz(n, sequence=[n]) {\r\nif (n === 1){\r\n    return `Sequence took ${sequence.length} steps. It was ${sequence}`;\r\n}\r\n\r\nif (n%2 === 0) {\r\n    n = n/2;\r\n} else { \r\n    n = 3*n + 1;\r\n}\r\n\r\nreturn collatz(n,[...sequence,n]);\r\n}\r\n            </code></pre>\n<p>This function takes a number as a parameter, as well as another parameter called <code>sequence</code>, which has a default value of an array containing the first parameter. The second parameter is only used when the function calls itself recursively.</p>\n<p>The first thing the function does is tests to see if <code>n</code> has a value of 1. If it does, the function returns a message to say how many steps it took. If it hasn’t reached 1, it checks if the value of <code>n</code> is even (in which case it divides it by 2), or odd, in which case it multiplies by 3 and then adds 1. The function then calls itself, providing the new value of <code>n</code> and the new sequence as arguments. The new sequence is constructed by placing the old sequence and the value of <code>n</code> inside a new array and applying the spread operator to the old sequence.</p>\n<p>Let’s see what happens to the number 18:</p>\n<pre><code class=\"javascript language-javascript\">collatz(18);\r\n&lt;&lt; &#39;Sequence took 21 steps. It was 18,9,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1&#39;\r\n            </code></pre>\n<p>As you can see, it takes 21 steps, but eventually it ends up at 1.</p>\n<p>Have a go at using the function and see if you can find a value above 5 × 2⁶⁰ that doesn’t end at 1 — you’ll be famous if you do!</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507022903jsninjacover-only-thumb-228x300.png\" alt=\"\" width=\"228\" height=\"300\" class=\"alignleft size-medium wp-image-160439\" /></p>\n<p><em>The following is a short extract from our new book, <a href=\"https://www.sitepoint.com/premium/books/javascript-novice-to-ninja-2nd-edition\">JavaScript: Novice to Ninja, 2nd Edition</a>, written by Darren Jones. It&#8217;s the ultimate beginner&#8217;s guide to JavaScript. SitePoint Premium members get access with their membership, or you can buy a copy in stores worldwide.</em></p>\n<p>The dynamic nature of JavaScript means that a function is able to not only call itself, but define itself, and even redefine itself. This is done by assigning an anonymous function to a variable that has <em>the same name as the function</em>.</p>\n<p>Consider the following function:</p>\n<pre><code class=\"javascript language-javascript\">function party(){\r\nconsole.log(&#39;Wow this is amazing!&#39;);\r\nparty = function(){\r\n    console.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n}\r\n            </code></pre>\n<p>This logs a message in the console, then redefines itself to log a different message in the console. When the function has been called once, it will be as if it was defined like this:</p>\n<pre><code class=\"javascript language-javascript\">function party() {\r\nconsole.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n            </code></pre>\n<p>Every time the function is called after the first time, it will log the message “Been there, got the T-Shirt”:</p>\n<pre><code class=\"javascript language-javascript\">party();\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n\r\nparty();\r\n&lt;&lt; &#39;Been there, got the T-Shirt&#39;\r\n\r\nparty();\r\n&lt;&lt; &#39;Been there, got the T-Shirt&#39;\r\n            </code></pre>\n<p>If the function is also assigned to another variable, this variable will maintain the original function definition and not be rewritten. This is because the original function is assigned to a variable, then within the function, a variable with the same name as the function is assigned to a different function. You can see an example of this if we create a variable called <code>beachParty</code> that is assigned to the <code>party()</code> function <em>before</em> it is called for the first time and redefined:</p>\n<pre><code class=\"javascript language-javascript\">function party(){\r\nconsole.log(&#39;Wow this is amazing!&#39;);\r\nparty = function(){\r\n    console.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n}\r\n\r\nconst beachParty = party; // note that the party function has not been invoked\r\n\r\nbeachParty(); // the party() function has now been redefined, even though it hasn&#39;t been called explicitly\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n\r\nparty(); \r\n&lt;&lt; &#39;Been there, got the T-Shirt&#39;\r\n\r\nbeachParty(); // but this function hasn&#39;t been redefined\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n\r\nbeachParty(); // no matter how many times this is called it will remain the same\r\n&lt;&lt; &#39;Wow this is amazing!&#39;\r\n            </code></pre>\n<div class=\"box warning\">\n<h4>Losing Properties</h4>\n<div class=\"body\">\n<p>Be careful: if any properties have previously been set on the function, these will be lost when the function redefines itself. In the previous example, we can set a <code>music</code> property, and see that it no longer exists after the function has been invoked and redefined:</p>\n<pre><code class=\"javascript language-javascript\">function party() {\r\nconsole.log(&#39;Wow this is amazing!&#39;);\r\nparty = function(){\r\nconsole.log(&#39;Been there, got the T-Shirt&#39;);\r\n}\r\n}\r\n\r\nparty.music = &#39;Classical Jazz&#39;; // set a property of the function\r\n\r\nparty();\r\n&lt;&lt; &quot;Wow this is amazing!&quot;\r\n\r\nparty.music; // function has now been redefined, so the property doesn&#39;t exist\r\n&lt;&lt; undefined</code></pre>\n</p></div>\n</p></div>\n<p>This is called the <strong>Lazy Definition Pattern</strong> and is often used when some initialization code is required the first time it’s invoked. This means the initialization can be done the first time it’s called, then the function can be redefined to what you want it to be for every subsequent invocation.  </p>\n<h3 id=\"init-time-branching\">Init-Time Branching</h3>\n<p>This technique can be used with the feature detection that we discussed in the last chapter to create functions that rewrite themselves, known as <strong>init-time branching</strong>. This enables the functions to work more effectively in the browser, and avoid checking for features every time they’re invoked.</p>\n<p>Let’s take the example of our fictional <code>unicorn</code> object that’s yet to have full support in all browsers. In the last chapter, we looked at how we can use feature detection to check if this is supported. Now we can go one step further: we can define a function based on whether certain methods are supported. This means we only need to check for support the first time the function is called:</p>\n<pre><code class=\"javascript language-javascript\">function ride(){\r\n    if (window.unicorn) { \r\n        ride = function(){\r\n        // some code that uses the brand new and sparkly unicorn methods\r\n        return &#39;Riding on a unicorn is the best!&#39;;\r\n    }\r\n    } else {\r\n        ride = function(){\r\n        // some code that uses the older pony methods\r\n        return &#39;Riding on a pony is still pretty good&#39;;\r\n    }\r\n    }\r\n    return ride();\r\n}\r\n            </code></pre>\n<p>After we’ve checked whether the <code>window.unicorn</code> object exists (by checking to see if it’s truthy), we’ve rewritten the <code>ride()</code> function according to the outcome. Right at the end of the function, we call it again so that the rewritten function is now invoked, and the relevant value returned. One thing to be aware of is that the function is invoked twice the first time, although it becomes more efficient each subsequent time it’s invoked. Let’s take a look at how it works:</p>\n",
    "protected": false
    },
    "author": 71121,
    "featured_media": 160439,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407,
    771
    ],
    "tags": [
    7169,
    7245,
    3073
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160482"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/71121"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160482"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160482/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160439"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160482"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160482"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160482"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160428,
    "date": "2017-10-05T10:00:20",
    "date_gmt": "2017-10-05T17:00:20",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160428"
    },
    "modified": "2017-10-05T04:05:25",
    "modified_gmt": "2017-10-05T11:05:25",
    "slug": "hello-world-your-first-javascript-programs",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/hello-world-your-first-javascript-programs/",
    "title": {
    "rendered": "Hello, World! Your First JavaScript Programs"
    },
    "content": {
    "rendered": "<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507022903jsninjacover-only-thumb-228x300.png\" alt=\"\" width=\"228\" height=\"300\" class=\"alignleft size-medium wp-image-160439\" /></p>\n<p><em>The following is a short extract from our new book, <a href=\"https://www.sitepoint.com/premium/books/javascript-novice-to-ninja-2nd-edition\">JavaScript: Novice to Ninja, 2nd Edition</a>, written by Darren Jones. It&#8217;s the ultimate beginner&#8217;s guide to JavaScript. SitePoint Premium members get access with their membership, or you can buy a copy in stores worldwide.</em></p>\n<p>It is a tradition when learning programming languages to start with a &#8220;Hello, world!&#8221; program. This is a simple program that outputs the phrase &#8220;Hello world!&#8221; to announce your arrival to the world of programming. We’re going to stick to this tradition and write this type of program in JavaScript. It will be a single statement that logs the phrase &#8220;Hello, world!&#8221; to the console.</p>\n<p>To get started, you’ll need to open up your preferred console (either the Node REPL, browser console, or <a href=\"http://es6console.co\">ES6 Console</a> on the web). Once the console has opened, all you need to do is enter the following code:</p>\n<pre><code class=\"javascript language-javascript\">console.log(&#39;Hello world!&#39;);\r\n</code></pre>\n<p>Then press <em>Enter</em>. if all went to plan you should see an output of &#8220;Hello, world!&#8221; displayed; similar to the screenshot below.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507019836ch1helloworld.png\" alt=\"\" width=\"400\" height=\"270\" class=\"aligncenter size-full wp-image-160429\" /> </p>\n<p>Congratulations, you’ve just written your first JavaScript program! It might not look like much, but a wise person once said that every ninja programmer’s journey begins with a single line of code (or something like that, anyway!).</p>\n<h2 id=\"javascript-in-the-browser\">JavaScript in the Browser</h2>\n<p>JavaScript is an interpreted language and needs a host environment to run. Because of its origins, the main environment that JavaScript runs in is the browser, although it can be run in other environments; for example, our first program that we just wrote ran in the Node REPL. Node can also be used to run JavaScript on a server. By far the most common use of JavaScript is still to make web pages interactive. Because of this, we should have a look at what makes up a web page before we go any further.</p>\n<h2 id=\"three-layers-of-the-web\">Three Layers of the Web</h2>\n<p>Nearly all web pages are made up of three key ingredients ― HTML, CSS and JavaScript. HTML is used to mark up the content. CSS is the presentation layer, and JavaScript adds the interactivity.</p>\n<p>Each layer builds on the last. A web page should be able to function with just the HTML layer ― in fact, many websites celebrate “<a href=\"https://css-naked-day.github.io\">naked day</a>” when they remove the CSS layer from their site. A website using just the HTML layer will be in its purest form and look very old school, but should still be fully functional.</p>\n<div class=\"box note\">\n<h4>Keep These Layers Separate</h4>\n<div class=\"body\">\n<p>It is widely considered best practice to separate the concerns of each layer, so each layer is only responsible for one thing. Putting them altogether can lead to very complicated pages where all of the code is mixed up together in one file, causing “tag soup” or “code spaghetti”. This used to be the standard way of producing a website and there are still plenty of examples on the web that do this.</p>\n</p></div>\n</p></div>\n<h2 id=\"unobtrusive-javascript\">Unobtrusive JavaScript</h2>\n<p>When JavaScript was initially used, it was designed to be inserted directly into the HTML code, as can be seen in this example that will display a message when a button is clicked:</p>\n<pre><code class=\"markup language-markup\">&lt;button id=&#39;button&#39; href=&#39;#&#39; onclick=&#39;alert(&quot;Hello World&quot;)&#39;&gt;Click Me&lt;/a&gt;</code></pre>\n<p>This made it difficult to see what was happening, as the JavaScript code was mixed up with the HTML. It also meant the code was tightly coupled to the HTML, so any changes in the HTML required the JavaScript code to also be changed to stop it breaking.</p>\n<p>It’s possible to keep the JavaScript code away from the rest of the HTML by placing it inside its own <code>&lt;script&gt;</code> tags. The following code will achieve the same result as that above:</p>\n<pre><code class=\"markup language-markup\">&lt;script&gt;\r\nconst btn = document.getElementById(’link’)\r\nbtn.addEventListener(&#39;click&#39;, function() {\r\n    alert(&#39;Hello World!&#39;);\r\n    };\r\n&lt;/script&gt;</code></pre>\n<p>This is better because all the JavaScript is in one place, between the two script tags, instead of mixed with the HTML tags.</p>\n<p>We can go one step further and keep the JavaScript code completely separate from the HTML and CSS in its own file. This can be linked to using the <code>src</code> attribute in the <code>script</code> tag to specify the file to link to:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=&#39;main.js&#39;&gt;&lt;/script&gt;\r\n                </code></pre>\n<p>The JavaScript code would then be placed in a file called <code>main.js</code> inside the same directory as the HTML document. This concept of keeping the JavaScript code completely separate is one of the core principles of <a href=\"https://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusive JavaScript</a>.</p>\n<p>In a similar way, the CSS should also be kept in a separate file, so the only code in a web page is the actual HTML with links to the CSS and JavaScript files. This is generally considered best practice and is the approach we’ll be using in the book.</p>\n<div class=\"box warning\">\n<h4>Self-Closing Tags</h4>\n<div class=\"body\">\n<p>If you’ve used XML or XHTML, you might have come across self-closing tags such as this script tag:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=&#39;main.js&#39; /&gt;\r\n</code></pre>\n<p>These will fail to work in HTML5, so should be avoided.</p>\n<p>You may see some legacy code that uses the language attribute:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=&#39;main.js&#39; language=&#39;javascript&#39;&gt;&lt;/script&gt;</code></pre>\n<p>This is unnecessary in HTML5, but it will still work.</p>\n</p></div>\n</p></div>\n<h2 id=\"graceful-degradation-and-progressive-enhancement\">Graceful Degradation and Progressive Enhancement</h2>\n<p><strong>Graceful degradation</strong> is the process of building a website so it works best in a modern browser that uses JavaScript, but still works to a reasonable standard in older browsers, or if JavaScript or some of its features are unavailable. An example of this are programs that are broadcast in high definition (HD) ― they work best on HD televisions but still work on a standard TV; it’s just the picture will be of a lesser quality. The programs will even work on a black-and-white television.</p>\n<p><strong>Progressive enhancement</strong> is the process of building a web page from the ground up with a base level of functionality, then adding extra enhancements if they are available in the browser. This should feel natural if you follow the principle of three layers, with the JavaScript layer enhancing the web page rather than being an essential element that the page cannot exist without. An example might be the phone companies who offer a basic level of phone calls, but provide extra services such as call-waiting and caller ID if your telephone supports it.</p>\n<p>Whenever you add JavaScript to a web page, you should always think about the approach you want to take. Do you want to start with lots of amazing effects that push the boundaries, then make sure the experience degrades gracefully for those who might not have the latest and greatest browsers? Or do you want to start off building a functional website that works across most browsers, then enhance the experience using JavaScript? The two approaches are similar, but subtly different.</p>\n<h2 id=\"your-second-javascript-program\">Your Second JavaScript Program</h2>\n<p>We’re going to finish the chapter with a second JavaScript program that will run in the browser. This example is more complicated than the previous one and includes a lot of concepts that will be covered in later chapters in more depth, so don’t worry if you don’t understand everything at this stage! The idea is to show you what JavaScript is capable of, and introduce some of the important concepts that will be covered in the upcoming chapters.</p>\n<p>We’ll follow the practice of unobtrusive JavaScript mentioned earlier and keep our JavaScript code in a separate file. Start by creating a folder called <code>rainbow</code>. Inside that folder create a file called <code>rainbow.html</code> and another called <code>main.js</code>.</p>\n<p>Let’s start with the HTML. Open up <code>rainbow.html</code> and enter the following code:</p>\n<pre><code class=\"markup language-markup\">&lt;head&gt;\r\n&lt;meta charset=&#39;utf-8&#39;&gt;\r\n&lt;title&gt;I Can Click A Rainbow&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;button id=&#39;button&#39;&gt;click me&lt;/button&gt;\r\n&lt;script src=&#39;main.js&#39;&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n                </code></pre>\n<p>This file is a fairly standard HTML5 page that contains a button with an ID of <code>button</code>. The ID attribute is very useful for JavaScript to use as a hook to access different elements of the page. At the bottom is a <code>script</code> tag that links to our JavaScript file.</p>\n<p>Now for the JavaScript. Open up <code>main.js</code> and enter the following code:</p>\n<pre><code class=\"javascript language-javascript\">const btn = document.getElementById(&#39;button&#39;);\r\n\r\nconst rainbow = [&#39;red&#39;,&#39;orange&#39;,&#39;yellow&#39;,&#39;green&#39;,&#39;blue&#39;,&#39;rebeccapurple&#39;,&#39;violet&#39;];\r\n\r\nfunction change() {      \r\ndocument.body.style.background = rainbow[Math.floor(7*Math.random())];\r\n}\r\nbtn.addEventListener(&#39;click&#39;, change);\r\n                </code></pre>\n<p>Our first task in the JavaScript code is to create a variable called <code>btn</code> (we cover variables in Chapter 2).</p>\n<p>We then use the <code>document.getElementById</code> function to find the HTML element with the ID of <code>btn</code> (Finding HTML elements is covered in Chapter 6). This is then assigned to the <code>btn</code> variable.</p>\n<p>We now create another variable called <code>rainbow</code>. An array containing a list of strings of different colors is then assigned to the <code>rainbow</code> variable (we cover strings and variables in Chapter 2 and arrays in Chapter 3).</p>\n<p>Then we create a function called <code>change</code> (we cover functions in Chapter 4). This sets the background color of the body element to one of the colors of the rainbow (changing the style of a page will be covered in Chapter 6). This involves selecting a random number using the built-in <code>Math</code> object (covered in Chapter 5) and selecting the corresponding color from the <code>rainbow</code> array.</p>\n<p>Last of all, we create an <em>event handler</em>, which checks for when the button is clicked on. When this happens it calls the <code>change</code> function that we just defined (event handlers are covered in Chapter 7).</p>\n<p>Open <code>rainbow.html</code> in your favorite browser and try clicking on the button a few times. If everything is working correctly, the background should change to every color of the rainbow, such as in the screenshot below.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507020641ch1rainbow.png\" alt=\"\" width=\"400\" height=\"258\" class=\"aligncenter size-full wp-image-160432\" /></p>\n<p>If you want to try this out quickly, you can checkout the code on <a href=\"http://codepen.io/daz4126/pen/VPRdGa\">CodePen</a>. For the sake of getting some practice in though, I would recommend you also take the time to create these files, write up the code by hand and try running it in your browser as well.</p>\n<h2 id=\"don-t-break-the-web\">Don’t Break the Web</h2>\n<p>An important concept in the development of the JavaScript language is that it has to be <strong>backward compatible</strong>. That is, all old code must work the same way when interpreted by an engine running a new specification (it’s a bit like saying that PlayStation 4 must still be able to run games created for PlayStation 1, 2 and 3). This is to prevent JavaScript from “breaking the web” by making drastic changes that would mean legacy code on some websites not running as expected in modern browsers.</p>\n<p>So new versions of JavaScript can’t do anything that isn’t already possible in previous versions of the language. All that changes is the notation used to implement a particular feature to make it easier to write. This is known as <em>syntactic sugar</em>, as it allows an existing piece of code to be written in a nicer and more succinct way.</p>\n<p>The fact that all versions of JavaScript are backwardly compatible means that we can use <strong>transpilers</strong> to convert  code from one version of JavaScript into another. For example, you could write your code using the most up-to-date version of JavaScript and then transpile it into version 5 code, which would work in virtually any browser.</p>\n<p>A new version of ECMAScript every year means it’s likely that browsers will always be slightly when it comes to implementing the latest features (they’re getting faster at doing this, but it’s still taken two years for most browsers to support ES6 modules). This means that if you want to use the most up-to-date coding techniques, you’ll probably have to rely on using a transpiler, such as <a href=\"https://babeljs.io\">Babel</a>, at some point.</p>\n<p>If you find that some code isn’t working in your browser, you can add the following link into your HTML document:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=&#39;https://unpkg.com/babel-standalone@6/babel.min.js&#39;&gt;&lt;/script&gt;</code></pre>\n<p>Note that this link needs to go <em>before</em> any JavaScript that needs to be transpiled.</p>\n<p>You also have to change the <code>type</code> attribute to <code>text/babel</code> in any links to JavaScript files. For example, the link to the JavaScript file in the example above would change to:</p>\n<pre><code class=\"markup language-markup\">&lt;script type=&#39;text/babel&#39; src=&#39;main.js&#39;&gt;&lt;/script&gt;</code></pre>\n<p>This isn’t the best long-term solution as it requires the browser to transpile all the code at run-time, although it’s fine for experimenting with code. A better solution is to transpile your code as part of a build process, which is covered in Chapter 15.</p>\n<p>A number of online editors such as <a href=\"http://codepen.io\">CodePen</a>, <a href=\"https://babeljs.io/repl\">Babel REPL</a> and <a href=\"https://jsfiddle.net\">JS Fiddle</a> allow you to transpile code in the browser. The <a href=\"http://kangax.github.io/compat-table/es6/\">ECMAScript 6 compatibility table</a>  also contains up-to-date information about which features have been implemented in various transpilers.</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507022903jsninjacover-only-thumb-228x300.png\" alt=\"\" width=\"228\" height=\"300\" class=\"alignleft size-medium wp-image-160439\" /></p>\n<p><em>The following is a short extract from our new book, <a href=\"https://www.sitepoint.com/premium/books/javascript-novice-to-ninja-2nd-edition\">JavaScript: Novice to Ninja, 2nd Edition</a>, written by Darren Jones. It&#8217;s the ultimate beginner&#8217;s guide to JavaScript. SitePoint Premium members get access with their membership, or you can buy a copy in stores worldwide.</em></p>\n<p>It is a tradition when learning programming languages to start with a &#8220;Hello, world!&#8221; program. This is a simple program that outputs the phrase &#8220;Hello world!&#8221; to announce your arrival to the world of programming. We’re going to stick to this tradition and write this type of program in JavaScript. It will be a single statement that logs the phrase &#8220;Hello, world!&#8221; to the console.</p>\n<p>To get started, you’ll need to open up your preferred console (either the Node REPL, browser console, or <a href=\"http://es6console.co\">ES6 Console</a> on the web). Once the console has opened, all you need to do is enter the following code:</p>\n<pre><code class=\"javascript language-javascript\">console.log(&#39;Hello world!&#39;);\r\n</code></pre>\n<p>Then press <em>Enter</em>. if all went to plan you should see an output of &#8220;Hello, world!&#8221; displayed; similar to the screenshot below.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507019836ch1helloworld.png\" alt=\"\" width=\"400\" height=\"270\" class=\"aligncenter size-full wp-image-160429\" /> </p>\n<p>Congratulations, you’ve just written your first JavaScript program! It might not look like much, but a wise person once said that every ninja programmer’s journey begins with a single line of code (or something like that, anyway!).</p>\n<h2 id=\"javascript-in-the-browser\">JavaScript in the Browser</h2>\n<p>JavaScript is an interpreted language and needs a host environment to run. Because of its origins, the main environment that JavaScript runs in is the browser, although it can be run in other environments; for example, our first program that we just wrote ran in the Node REPL. Node can also be used to run JavaScript on a server. By far the most common use of JavaScript is still to make web pages interactive. Because of this, we should have a look at what makes up a web page before we go any further.</p>\n<h2 id=\"three-layers-of-the-web\">Three Layers of the Web</h2>\n<p>Nearly all web pages are made up of three key ingredients ― HTML, CSS and JavaScript. HTML is used to mark up the content. CSS is the presentation layer, and JavaScript adds the interactivity.</p>\n<p>Each layer builds on the last. A web page should be able to function with just the HTML layer ― in fact, many websites celebrate “<a href=\"https://css-naked-day.github.io\">naked day</a>” when they remove the CSS layer from their site. A website using just the HTML layer will be in its purest form and look very old school, but should still be fully functional.</p>\n<div class=\"box note\">\n<h4>Keep These Layers Separate</h4>\n<div class=\"body\">\n<p>It is widely considered best practice to separate the concerns of each layer, so each layer is only responsible for one thing. Putting them altogether can lead to very complicated pages where all of the code is mixed up together in one file, causing “tag soup” or “code spaghetti”. This used to be the standard way of producing a website and there are still plenty of examples on the web that do this.</p>\n</p></div>\n</p></div>\n<h2 id=\"unobtrusive-javascript\">Unobtrusive JavaScript</h2>\n<p>When JavaScript was initially used, it was designed to be inserted directly into the HTML code, as can be seen in this example that will display a message when a button is clicked:</p>\n<pre><code class=\"markup language-markup\">&lt;button id=&#39;button&#39; href=&#39;#&#39; onclick=&#39;alert(&quot;Hello World&quot;)&#39;&gt;Click Me&lt;/a&gt;</code></pre>\n<p>This made it difficult to see what was happening, as the JavaScript code was mixed up with the HTML. It also meant the code was tightly coupled to the HTML, so any changes in the HTML required the JavaScript code to also be changed to stop it breaking.</p>\n<p>It’s possible to keep the JavaScript code away from the rest of the HTML by placing it inside its own <code>&lt;script&gt;</code> tags. The following code will achieve the same result as that above:</p>\n<pre><code class=\"markup language-markup\">&lt;script&gt;\r\nconst btn = document.getElementById(’link’)\r\nbtn.addEventListener(&#39;click&#39;, function() {\r\n    alert(&#39;Hello World!&#39;);\r\n    };\r\n&lt;/script&gt;</code></pre>\n<p>This is better because all the JavaScript is in one place, between the two script tags, instead of mixed with the HTML tags.</p>\n<p>We can go one step further and keep the JavaScript code completely separate from the HTML and CSS in its own file. This can be linked to using the <code>src</code> attribute in the <code>script</code> tag to specify the file to link to:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=&#39;main.js&#39;&gt;&lt;/script&gt;\r\n                </code></pre>\n<p>The JavaScript code would then be placed in a file called <code>main.js</code> inside the same directory as the HTML document. This concept of keeping the JavaScript code completely separate is one of the core principles of <a href=\"https://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusive JavaScript</a>.</p>\n<p>In a similar way, the CSS should also be kept in a separate file, so the only code in a web page is the actual HTML with links to the CSS and JavaScript files. This is generally considered best practice and is the approach we’ll be using in the book.</p>\n<div class=\"box warning\">\n<h4>Self-Closing Tags</h4>\n<div class=\"body\">\n<p>If you’ve used XML or XHTML, you might have come across self-closing tags such as this script tag:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=&#39;main.js&#39; /&gt;\r\n</code></pre>\n<p>These will fail to work in HTML5, so should be avoided.</p>\n<p>You may see some legacy code that uses the language attribute:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=&#39;main.js&#39; language=&#39;javascript&#39;&gt;&lt;/script&gt;</code></pre>\n<p>This is unnecessary in HTML5, but it will still work.</p>\n</p></div>\n</p></div>\n<h2 id=\"graceful-degradation-and-progressive-enhancement\">Graceful Degradation and Progressive Enhancement</h2>\n<p><strong>Graceful degradation</strong> is the process of building a website so it works best in a modern browser that uses JavaScript, but still works to a reasonable standard in older browsers, or if JavaScript or some of its features are unavailable. An example of this are programs that are broadcast in high definition (HD) ― they work best on HD televisions but still work on a standard TV; it’s just the picture will be of a lesser quality. The programs will even work on a black-and-white television.</p>\n<p><strong>Progressive enhancement</strong> is the process of building a web page from the ground up with a base level of functionality, then adding extra enhancements if they are available in the browser. This should feel natural if you follow the principle of three layers, with the JavaScript layer enhancing the web page rather than being an essential element that the page cannot exist without. An example might be the phone companies who offer a basic level of phone calls, but provide extra services such as call-waiting and caller ID if your telephone supports it.</p>\n<p>Whenever you add JavaScript to a web page, you should always think about the approach you want to take. Do you want to start with lots of amazing effects that push the boundaries, then make sure the experience degrades gracefully for those who might not have the latest and greatest browsers? Or do you want to start off building a functional website that works across most browsers, then enhance the experience using JavaScript? The two approaches are similar, but subtly different.</p>\n<h2 id=\"your-second-javascript-program\">Your Second JavaScript Program</h2>\n<p>We’re going to finish the chapter with a second JavaScript program that will run in the browser. This example is more complicated than the previous one and includes a lot of concepts that will be covered in later chapters in more depth, so don’t worry if you don’t understand everything at this stage! The idea is to show you what JavaScript is capable of, and introduce some of the important concepts that will be covered in the upcoming chapters.</p>\n<p>We’ll follow the practice of unobtrusive JavaScript mentioned earlier and keep our JavaScript code in a separate file. Start by creating a folder called <code>rainbow</code>. Inside that folder create a file called <code>rainbow.html</code> and another called <code>main.js</code>.</p>\n<p>Let’s start with the HTML. Open up <code>rainbow.html</code> and enter the following code:</p>\n<pre><code class=\"markup language-markup\">&lt;head&gt;\r\n&lt;meta charset=&#39;utf-8&#39;&gt;\r\n&lt;title&gt;I Can Click A Rainbow&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;button id=&#39;button&#39;&gt;click me&lt;/button&gt;\r\n&lt;script src=&#39;main.js&#39;&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n                </code></pre>\n<p>This file is a fairly standard HTML5 page that contains a button with an ID of <code>button</code>. The ID attribute is very useful for JavaScript to use as a hook to access different elements of the page. At the bottom is a <code>script</code> tag that links to our JavaScript file.</p>\n<p>Now for the JavaScript. Open up <code>main.js</code> and enter the following code:</p>\n<pre><code class=\"javascript language-javascript\">const btn = document.getElementById(&#39;button&#39;);\r\n\r\nconst rainbow = [&#39;red&#39;,&#39;orange&#39;,&#39;yellow&#39;,&#39;green&#39;,&#39;blue&#39;,&#39;rebeccapurple&#39;,&#39;violet&#39;];\r\n\r\nfunction change() {      \r\ndocument.body.style.background = rainbow[Math.floor(7*Math.random())];\r\n}\r\nbtn.addEventListener(&#39;click&#39;, change);\r\n                </code></pre>\n<p>Our first task in the JavaScript code is to create a variable called <code>btn</code> (we cover variables in Chapter 2).</p>\n<p>We then use the <code>document.getElementById</code> function to find the HTML element with the ID of <code>btn</code> (Finding HTML elements is covered in Chapter 6). This is then assigned to the <code>btn</code> variable.</p>\n<p>We now create another variable called <code>rainbow</code>. An array containing a list of strings of different colors is then assigned to the <code>rainbow</code> variable (we cover strings and variables in Chapter 2 and arrays in Chapter 3).</p>\n<p>Then we create a function called <code>change</code> (we cover functions in Chapter 4). This sets the background color of the body element to one of the colors of the rainbow (changing the style of a page will be covered in Chapter 6). This involves selecting a random number using the built-in <code>Math</code> object (covered in Chapter 5) and selecting the corresponding color from the <code>rainbow</code> array.</p>\n<p>Last of all, we create an <em>event handler</em>, which checks for when the button is clicked on. When this happens it calls the <code>change</code> function that we just defined (event handlers are covered in Chapter 7).</p>\n<p>Open <code>rainbow.html</code> in your favorite browser and try clicking on the button a few times. If everything is working correctly, the background should change to every color of the rainbow, such as in the screenshot below.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1507020641ch1rainbow.png\" alt=\"\" width=\"400\" height=\"258\" class=\"aligncenter size-full wp-image-160432\" /></p>\n",
    "protected": false
    },
    "author": 71121,
    "featured_media": 160478,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407,
    771,
    422
    ],
    "tags": [
    7169,
    3073
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160428"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/71121"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160428"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160428/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160478"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160428"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160428"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160428"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160096,
    "date": "2017-10-04T09:30:17",
    "date_gmt": "2017-10-04T16:30:17",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160096"
    },
    "modified": "2017-10-04T17:41:11",
    "modified_gmt": "2017-10-05T00:41:11",
    "slug": "angular-authentication-oidc",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/angular-authentication-oidc/",
    "title": {
    "rendered": "Create an Angular App with Authentication in 20 Minutes"
    },
    "content": {
    "rendered": "<p class=\"wp-special\"><em>This article was originally published on <a href=\"https://developer.okta.com/blog/2017/04/17/angular-authentication-with-oidc\" rel=\"canonical\">OKTA Developer Blog</a>. Thank you for supporting the partners who make SitePoint possible.</em></p>\n<p>Angular (formerly called Angular 2.0) is quickly becoming one of the most powerful ways to build a modern single-page app. A core strength is Angular’s focus on building reusable components, which help you decouple the various concerns in your application. Take authentication, for example: it can be painful to build, but once you wrap it in a component, the authentication logic can be reused throughout your application.</p>\n<p>The Angular CLI makes it easy to scaffold new components, and even entire projects. If you haven’t used the Angular CLI to quickly generate Angular code, you’re in for a treat!</p>\n<p>In this example, you’ll build a simple web application with Angular CLI, a tool for Angular development. You’ll create an application with search and edit features, then add authentication.</p>\n<h2 id=\"createanangularapplication\">Create an Angular Application</h2>\n<p><em>TIP: If you&#8217;d like to skip building the Angular application and get right to adding authentication, you can clone my <code>ng-demo</code> project, then skip to the <a href=\"#createanopenidconnectappinokta\">Create an OpenID Connect App in Okta</a> section.</em></p>\n<pre><code class=\"bash language-bash\">git clone https://github.com/mraible/ng-demo.git\r\n</code></pre>\n<h3 id=\"whatyoullneed\">What You&#8217;ll Need</h3>\n<ul>\n<li>About 20 minutes</li>\n<li>A favorite text editor or IDE. I recommend <a href=\"https://www.jetbrains.com/idea/\">IntelliJ IDEA</a></li>\n<li><a href=\"https://nodejs.org\">Node.js</a> and npm installed. I recommend using <a href=\"https://github.com/creationix/nvm\">nvm</a></li>\n<li><a href=\"https://cli.angular.io/\">Angular CLI</a> installed. If you don’t have Angular CLI installed, install it using <code>npm install -g @angular/cli</code></li>\n</ul>\n<p>Create a new project using the <code>ng new</code> command:</p>\n<pre><code class=\"bash language-bash\">ng new ng-demo\r\n</code></pre>\n<p>This will create a <code>ng-demo</code> project and run <code>npm install</code> in it. It should take about a minute to complete, but that could vary depending on your connection speed.</p>\n<pre><code class=\"bash language-bash\">[mraible:~/dev] $ ng new ng-demo\r\ninstalling ng\r\n  create .editorconfig\r\n  create README.md\r\n  create src/app/app.component.css\r\n  create src/app/app.component.html\r\n  create src/app/app.component.spec.ts\r\n  create src/app/app.component.ts\r\n  create src/app/app.module.ts\r\n  create src/assets/.gitkeep\r\n  create src/environments/environment.prod.ts\r\n  create src/environments/environment.ts\r\n  create src/favicon.ico\r\n  create src/index.html\r\n  create src/main.ts\r\n  create src/polyfills.ts\r\n  create src/styles.css\r\n  create src/test.ts\r\n  create src/tsconfig.app.json\r\n  create src/tsconfig.spec.json\r\n  create src/typings.d.ts\r\n  create .angular-cli.json\r\n  create e2e/app.e2e-spec.ts\r\n  create e2e/app.po.ts\r\n  create e2e/tsconfig.e2e.json\r\n  create .gitignore\r\n  create karma.conf.js\r\n  create package.json\r\n  create protractor.conf.js\r\n  create tsconfig.json\r\n  create tslint.json\r\nSuccessfully initialized git.\r\nInstalling packages for tooling via npm.\r\nInstalled packages for tooling via npm.\r\nYou can `ng set --global packageManager=yarn`.\r\nProject 'ng-demo' successfully created.\r\n[mraible:~] 46s $\r\n</code></pre>\n<p>You can see the what version of Angular CLI you&#8217;re using with <code>ng --version</code>.</p>\n<pre><code class=\"bash language-bash\">$ ng --version\r\n    _                      _                 ____ _     ___\r\n   / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\r\n  / △ \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\r\n / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\r\n/_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\r\n               |___/\r\n@angular/cli: 1.3.2\r\nnode: 8.4.0\r\nos: darwin x64\r\n</code></pre>\n<h2 id=\"runyourangularapplication\">Run Your Angular Application</h2>\n<p>The project is configured with <a href=\"https://webpack.github.io/docs/webpack-dev-server.html\">webpack dev server</a>. To start it, make sure you&#8217;re in the <code>ng-demo</code> directory, then run:</p>\n<pre><code class=\"bash language-bash\">ng serve\r\n</code></pre>\n<p>You should see a screen like the one below at <a href=\"http://localhost:4200\">http://localhost:4200</a>.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398057Okta-SP2_Img1_default-homepage-1024x667.png\" alt=\"Default Homepage\" width=\"1024\" height=\"667\" class=\"alignnone size-large wp-image-160097\" /></p>\n<p>You can make sure your new project&#8217;s tests pass, run <code>ng test</code>:</p>\n<pre><code class=\"bash language-bash\">$ ng test\r\n...\r\nChrome 60.0.3112 (Mac OS X 10.12.6): Executed 3 of 3 SUCCESS (0.239 secs / 0.213 secs)\r\n</code></pre>\n<h2 id=\"addasearchfeature\">Add a Search Feature</h2>\n<p>To add a search feature, open the project in an IDE or your favorite text editor. For IntelliJ IDEA, use File > New Project > Static Web and point to the <code>ng-demo</code> directory.</p>\n<p>In a terminal window, cd into your project&#8217;s directory and run the following command. This will create a search component.</p>\n<pre><code class=\"bash language-bash\">$ ng g component search\r\ninstalling component\r\n  create src/app/search/search.component.css\r\n  create src/app/search/search.component.html\r\n  create src/app/search/search.component.spec.ts\r\n  create src/app/search/search.component.ts\r\n  update src/app/app.module.ts\r\n</code></pre>\n<p>Open <code>src/app/search/search.component.html</code> and replace its default HTML with the following:</p>\n<pre><code class=\"markup language-markup\">&lt;h2&gt;Search&lt;/h2&gt;\r\n&lt;form&gt;\r\n  &lt;input type=\"search\" name=\"query\" [(ngModel)]=\"query\" (keyup.enter)=\"search()\"&gt;\r\n  &lt;button type=\"button\" (click)=\"search()\"&gt;Search&lt;/button&gt;\r\n&lt;/form&gt;\r\n&lt;pre&gt;{{searchResults | json}}&lt;/pre&gt;\r\n</code></pre>\n<p>The <a href=\"https://angular.io/docs/ts/latest/guide/router.html\">Router documentation</a> for Angular provides the information you need to setup a route to the <code>SearchComponent</code> you just generated. Here&#8217;s a quick summary:</p>\n<p>In <code>src/app/app.module.ts</code>, add an <code>appRoutes</code> constant and import it in <code>@NgModule</code>:</p>\n<pre><code class=\"typescript language-typescript\">import { Routes, RouterModule } from '@angular/router';\r\n\r\nconst appRoutes: Routes = [\r\n  {path: 'search', component: SearchComponent},\r\n  {path: '', redirectTo: '/search', pathMatch: 'full'}\r\n];\r\n\r\n@NgModule({\r\n  ...\r\n  imports: [\r\n    ...\r\n    RouterModule.forRoot(appRoutes)\r\n  ]\r\n  ...\r\n})\r\nexport class AppModule { }\r\n</code></pre>\n<p>In <code>src/app/app.component.html</code>, adjust the placeholder content and add a <code>&lt;router-outlet&gt;</code> tag to display routes.</p>\n<pre><code class=\"markup language-markup\">&lt;h1&gt;Welcome to {{title}}!&lt;/h1&gt;\r\n&lt;!-- Routed views go here --&gt;\r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</code></pre>\n<p>Now that you have routing setup, you can continue writing the search feature.</p>\n<p>If you still have <code>ng serve</code> running, your browser should refresh automatically. If not, navigate to http://localhost:4200. You will likely see a blank screen. Open your JavaScript console and you&#8217;ll see the problem.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398171Okta-SP2_Img2_ngmodel-error-1024x535.png\" alt=\"NG Model Error\" width=\"1024\" height=\"535\" class=\"alignnone size-large wp-image-160098\" /></p>\n<p>To solve this, open <code>src/app/app.module.ts</code> and add <code>FormsModule</code> as an import in <code>@NgModule</code>:</p>\n<pre><code class=\"typescript language-typescript\">import { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  ...\r\n  imports: [\r\n    ...\r\n    FormsModule\r\n  ]\r\n  ...\r\n})\r\nexport class AppModule { }\r\n</code></pre>\n<p>Now you should see the search form.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398227Okta-SP2_Img3_search-without-css-1024x390.png\" alt=\"Search Without CSS\" width=\"1024\" height=\"390\" class=\"alignnone size-large wp-image-160099\" /></p>\n<p>If you want to add CSS for this components, open <code>src/app/search/search.component.css</code> and add some CSS. For example:</p>\n<pre><code class=\"css language-css\">:host {\r\n  display: block;\r\n  padding: 0 20px;\r\n}\r\n</code></pre>\n<p>This section has shown you how to generate a new component to a basic Angular application with Angular CLI. The next section will show you how to create and use a JSON file and <code>localStorage</code> to create a fake API.</p>\n<p>To get search results, create a <code>SearchService</code> that makes HTTP requests to a JSON file. Start by generating a new service.</p>\n<pre><code class=\"bash language-bash\">$ ng g service search\r\ninstalling service\r\n  create src/app/search.service.spec.ts\r\n  create src/app/search.service.ts\r\n  WARNING Service is generated but not provided, it must be provided to be used\r\n</code></pre>\n<p>Move the generated <code>search.service.ts</code> and its test to <code>app/shared/search</code>. You’ll need to create this directory. </p>\n<pre><code class=\"bash language-bash\">mkdir -p src/app/shared/search\r\nmv src/app/search.service.* src/app/shared/search/.\r\n</code></pre>\n<p>Create <code>src/assets/data/people.json</code> to hold your data.</p>\n<pre><code class=\"javascript language-javascript\">[\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"Peyton Manning\",\r\n    \"phone\": \"(303) 567-8910\",\r\n    \"address\": {\r\n      \"street\": \"1234 Main Street\",\r\n      \"city\": \"Greenwood Village\",\r\n      \"state\": \"CO\",\r\n      \"zip\": \"80111\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"name\": \"Demaryius Thomas\",\r\n    \"phone\": \"(720) 213-9876\",\r\n    \"address\": {\r\n      \"street\": \"5555 Marion Street\",\r\n      \"city\": \"Denver\",\r\n      \"state\": \"CO\",\r\n      \"zip\": \"80202\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"Von Miller\",\r\n    \"phone\": \"(917) 323-2333\",\r\n    \"address\": {\r\n      \"street\": \"14 Mountain Way\",\r\n      \"city\": \"Vail\",\r\n      \"state\": \"CO\",\r\n      \"zip\": \"81657\"\r\n    }\r\n  }\r\n]\r\n</code></pre>\n<p>Modify <code>src/app/shared/search/search.service.ts</code> and provide <code>Http</code> as a dependency in its constructor. In this same file, create a <code>getAll()</code> method to gather all the people. Also, define the <code>Address</code> and <code>Person</code> classes that JSON will be marshalled to.</p>\n<pre><code class=\"typescript language-typescript\">import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class SearchService {\r\n  constructor(private http: Http) {}\r\n\r\n  getAll() {\r\n    return this.http.get('assets/data/people.json')\r\n        .map((res: Response) =&gt; res.json());\r\n  }\r\n}\r\n\r\nexport class Address {\r\n  street: string;\r\n  city: string;\r\n  state: string;\r\n  zip: string;\r\n\r\n  constructor(obj?: any) {\r\n    this.street = obj &amp;&amp; obj.street || null;\r\n    this.city = obj &amp;&amp; obj.city || null;\r\n    this.state = obj &amp;&amp; obj.state || null;\r\n    this.zip = obj &amp;&amp; obj.zip || null;\r\n  }\r\n}\r\n\r\nexport class Person {\r\n  id: number;\r\n  name: string;\r\n  phone: string;\r\n  address: Address;\r\n\r\n  constructor(obj?: any) {\r\n    this.id = obj &amp;&amp; Number(obj.id) || null;\r\n    this.name = obj &amp;&amp; obj.name || null;\r\n    this.phone = obj &amp;&amp; obj.phone || null;\r\n    this.address = obj &amp;&amp; obj.address || null;\r\n  }\r\n}\r\n</code></pre>\n<p>To make these classes available for consumption by your components, edit <code>src/app/shared/index.ts</code> and add the following:</p>\n<pre><code class=\"typescript language-typescript\">export * from './search/search.service';\r\n</code></pre>\n<p>The reason for creating this file is so you can import multiple classes on a single line rather than having to import each individual class on separate lines.</p>\n<p>In <code>src/app/search/search.component.ts</code>, add imports for these classes.</p>\n<pre><code class=\"typescript language-typescript\">import { Person, SearchService } from '../shared';\r\n</code></pre>\n<p>You can now add <code>query</code> and <code>searchResults</code> variables. While you&#8217;re there, modify the constructor to inject the <code>SearchService</code>.</p>\n<pre><code class=\"typescript language-typescript\">export class SearchComponent implements OnInit {\r\n  query: string;\r\n  searchResults: Array&lt;Person&gt;;\r\n\r\n  constructor(private searchService: SearchService) {}\r\n</code></pre>\n<p>Then implement a <code>search()</code> method to call the service&#8217;s <code>getAll()</code> method.</p>\n<pre><code class=\"typescript language-typescript\">search(): void {\r\n  this.searchService.getAll().subscribe(\r\n    data =&gt; { this.searchResults = data; },\r\n    error =&gt; console.log(error)\r\n  );\r\n}\r\n</code></pre>\n<p>At this point, you&#8217;ll likely see the following message in your browser&#8217;s console.</p>\n<pre><code>ORIGINAL EXCEPTION: No provider for SearchService!\r\n</code></pre>\n<p>To fix the &#8220;No provider&#8221; error from above, update <code>app.module.ts</code> to import the <code>SearchService</code> and add the service to the list of providers. Because <code>SearchService</code> depends on <code>Http</code>, you’ll need to import <code>HttpModule</code> as well.</p>\n<pre><code class=\"typescript language-typescript\">import { SearchService } from './shared';\r\nimport { HttpModule } from '@angular/http';\r\n\r\n@NgModule({\r\n  ...\r\n  imports: [\r\n    ...\r\n    HttpModule\r\n  ],\r\n  providers: [SearchService],\r\n  bootstrap: [AppComponent]\r\n})\r\n</code></pre>\n<p>Now clicking the search button should work. To make the results look better, remove the <code>&lt;pre&gt;</code> tag and replace it with a <code>&lt;table&gt;</code> in <code>src/app/search/search.component.html</code>.</p>\n<pre><code class=\"markup language-markup\">&lt;table *ngIf=\"searchResults\"&gt;\r\n  &lt;thead&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Name&lt;/th&gt;\r\n    &lt;th&gt;Phone&lt;/th&gt;\r\n    &lt;th&gt;Address&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n  &lt;/thead&gt;\r\n  &lt;tbody&gt;\r\n  &lt;tr *ngFor=\"let person of searchResults; let i=index\"&gt;\r\n    &lt;td&gt;{{person.name}}&lt;/td&gt;\r\n    &lt;td&gt;{{person.phone}}&lt;/td&gt;\r\n    &lt;td&gt;{{person.address.street}}&lt;br/&gt;\r\n      {{person.address.city}}, {{person.address.state}} {{person.address.zip}}\r\n    &lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;/tbody&gt;\r\n&lt;/table&gt;\r\n</code></pre>\n<p>Then add some additional CSS in <code>src/app/search/search.component.css</code> to improve its table layout.</p>\n<pre><code class=\"css language-css\">table {\r\n  margin-top: 10px;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth {\r\n  text-align: left;\r\n  border-bottom: 2px solid #ddd;\r\n  padding: 8px;\r\n}\r\n\r\ntd {\r\n  border-top: 1px solid #ddd;\r\n  padding: 8px;\r\n}\r\n</code></pre>\n<p>Now the search results look better.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398271Okta-SP2_Img4_search-results-1024x566.png\" alt=\"Search Results\" width=\"1024\" height=\"566\" class=\"alignnone size-large wp-image-160101\"/></p>\n<p>But wait, you still don&#8217;t have search functionality! To add a search feature, add a <code>search()</code> method to <code>SearchService</code>.</p>\n<pre><code class=\"typescript language-typescript\">import { Observable } from 'rxjs';\r\n\r\nsearch(q: string): Observable&lt;any&gt; {\r\n  if (!q || q === '*') {\r\n    q = '';\r\n  } else {\r\n    q = q.toLowerCase();\r\n  }\r\n  return this.getAll().map(data =&gt; data.filter(item =&gt; JSON.stringify(item).toLowerCase().includes(q)));\r\n}\r\n</code></pre>\n<p>Then refactor <code>SearchComponent</code> to call this method with its <code>query</code> variable.</p>\n<pre><code class=\"typescript language-typescript\">search(): void {\r\n  this.searchService.search(this.query).subscribe(\r\n    data =&gt; { this.searchResults = data; },\r\n    error =&gt; console.log(error)\r\n  );\r\n}\r\n</code></pre>\n<p>Now search results will be filtered by the query value you type in.</p>\n<p>This section showed you how to fetch and display search results. The next section builds on this and shows how to edit and save a record.</p>\n<h2 id=\"addaneditfeature\">Add an Edit Feature</h2>\n<p>Modify <code>src/app/search/search.component.html</code> to add a link for editing a person.</p>\n<pre><code class=\"markup language-markup\">&lt;td&gt;&lt;a [routerLink]=\"['/edit', person.id]\"&gt;{{person.name}}&lt;/a&gt;&lt;/td&gt;\r\n</code></pre>\n<p>Run the following command to generate an <code>EditComponent</code>.</p>\n<pre><code class=\"bash language-bash\">$ ng g component edit\r\ninstalling component\r\n  create src/app/edit/edit.component.css\r\n  create src/app/edit/edit.component.html\r\n  create src/app/edit/edit.component.spec.ts\r\n  create src/app/edit/edit.component.ts\r\n  update src/app/app.module.ts\r\n</code></pre>\n<p>Add a route for this component in <code>src/app/app.module.ts</code>:</p>\n<pre><code class=\"typescript language-typescript\">const appRoutes: Routes = [\r\n  {path: 'search', component: SearchComponent},\r\n  {path: 'edit/:id', component: EditComponent},\r\n  {path: '', redirectTo: '/search', pathMatch: 'full'}\r\n];\r\n</code></pre>\n<p>Update <code>src/app/edit/edit.component.html</code> to display an editable form. You might notice I&#8217;ve added <code>id</code> attributes to most elements. This is to make things easier when writing integration tests with Protractor.</p>\n<pre><code class=\"markup language-markup\">&lt;div *ngIf=\"person\"&gt;\r\n  &lt;h3&gt;{{editName}}&lt;/h3&gt;\r\n  &lt;div&gt;\r\n    &lt;label&gt;Id:&lt;/label&gt;\r\n    {{person.id}}\r\n  &lt;/div&gt;\r\n  &lt;div&gt;\r\n    &lt;label&gt;Name:&lt;/label&gt;\r\n    &lt;input [(ngModel)]=\"editName\" name=\"name\" id=\"name\" placeholder=\"name\"/&gt;\r\n  &lt;/div&gt;\r\n  &lt;div&gt;\r\n    &lt;label&gt;Phone:&lt;/label&gt;\r\n    &lt;input [(ngModel)]=\"editPhone\" name=\"phone\" id=\"phone\" placeholder=\"Phone\"/&gt;\r\n  &lt;/div&gt;\r\n  &lt;fieldset&gt;\r\n    &lt;legend&gt;Address:&lt;/legend&gt;\r\n    &lt;address&gt;\r\n      &lt;input [(ngModel)]=\"editAddress.street\" id=\"street\"&gt;&lt;br/&gt;\r\n      &lt;input [(ngModel)]=\"editAddress.city\" id=\"city\"&gt;,\r\n      &lt;input [(ngModel)]=\"editAddress.state\" id=\"state\" size=\"2\"&gt;\r\n      &lt;input [(ngModel)]=\"editAddress.zip\" id=\"zip\" size=\"5\"&gt;\r\n    &lt;/address&gt;\r\n  &lt;/fieldset&gt;\r\n  &lt;button (click)=\"save()\" id=\"save\"&gt;Save&lt;/button&gt;\r\n  &lt;button (click)=\"cancel()\" id=\"cancel\"&gt;Cancel&lt;/button&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Modify <code>EditComponent</code> to import model and service classes and to use the <code>SearchService</code> to get data.</p>\n<pre><code class=\"typescript language-typescript\">import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Address, Person, SearchService } from '../shared';\r\nimport { Subscription } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html',\r\n  styleUrls: ['./edit.component.css']\r\n})\r\nexport class EditComponent implements OnInit, OnDestroy {\r\n  person: Person;\r\n  editName: string;\r\n  editPhone: string;\r\n  editAddress: Address;\r\n\r\n  sub: Subscription;\r\n\r\n  constructor(private route: ActivatedRoute,\r\n              private router: Router,\r\n              private service: SearchService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.route.params.subscribe(params =&gt; {\r\n      const id = + params['id']; // (+) converts string 'id' to a number\r\n      this.service.get(id).subscribe(person =&gt; {\r\n        if (person) {\r\n          this.editName = person.name;\r\n          this.editPhone = person.phone;\r\n          this.editAddress = person.address;\r\n          this.person = person;\r\n        } else {\r\n          this.gotoList();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['/search']);\r\n  }\r\n\r\n  save() {\r\n    this.person.name = this.editName;\r\n    this.person.phone = this.editPhone;\r\n    this.person.address = this.editAddress;\r\n    this.service.save(this.person);\r\n    this.gotoList();\r\n  }\r\n\r\n  gotoList() {\r\n    if (this.person) {\r\n      this.router.navigate(['/search', {term: this.person.name} ]);\r\n    } else {\r\n      this.router.navigate(['/search']);\r\n    }\r\n  }\r\n}\r\n</code></pre>\n<p>Modify <code>SearchService</code> to contain functions for finding a person by their id, and saving them. While you&#8217;re in there, modify the <code>search()</code> method to be aware of updated objects in <code>localStorage</code>.</p>\n<pre><code class=\"typescript language-typescript\">search(q: string): Observable&lt;any&gt; {\r\n  if (!q || q === '*') {\r\n    q = '';\r\n  } else {\r\n    q = q.toLowerCase();\r\n  }\r\n  return this.getAll().map(data =&gt; {\r\n    const results: any = [];\r\n    data.map(item =&gt; {\r\n      // check for item in localStorage\r\n      if (localStorage['person' + item.id]) {\r\n        item = JSON.parse(localStorage['person' + item.id]);\r\n      }\r\n      if (JSON.stringify(item).toLowerCase().includes(q)) {\r\n        results.push(item);\r\n      }\r\n    });\r\n    return results;\r\n  });\r\n}\r\n\r\nget(id: number) {\r\n  return this.getAll().map(all =&gt; {\r\n    if (localStorage['person' + id]) {\r\n      return JSON.parse(localStorage['person' + id]);\r\n    }\r\n    return all.find(e =&gt; e.id === id);\r\n  });\r\n}\r\n\r\nsave(person: Person) {\r\n  localStorage['person' + person.id] = JSON.stringify(person);\r\n}\r\n</code></pre>\n<p>You can add CSS to <code>src/app/edit/edit.component.css</code> if you want to make the form look a bit better.</p>\n<pre><code class=\"css language-css\">:host {\r\n  display: block;\r\n  padding: 0 20px;\r\n}\r\n\r\nbutton {\r\n  margin-top: 10px;\r\n}\r\n</code></pre>\n<p>At this point, you should be able to search for a person and update their information.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398310Okta-SP2_Img5_edit-form-1024x499.png\" alt=\"Edit Form\" width=\"1024\" height=\"499\" class=\"alignnone size-large wp-image-160102\" /></p>\n<p>The <code>&lt;form&gt;</code> in <code>src/app/edit/edit.component.html</code> calls a <code>save()</code> function to update a person&#8217;s data. You already implemented this above.<br />\nThe function calls a <code>gotoList()</code> function that appends the person&#8217;s name to the URL when sending the user back to the search screen.</p>\n<pre><code class=\"typescript language-typescript\">gotoList() {\r\n  if (this.person) {\r\n    this.router.navigate(['/search', {term: this.person.name} ]);\r\n  } else {\r\n    this.router.navigate(['/search']);\r\n  }\r\n}\r\n</code></pre>\n<p>Since the <code>SearchComponent</code> doesn&#8217;t execute a search automatically when you execute this URL, add the following logic to do so in its constructor.</p>\n<pre><code class=\"typescript language-typescript\">import { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\n...\r\n\r\nsub: Subscription;\r\n\r\nconstructor(private searchService: SearchService, private route: ActivatedRoute) {\r\n  this.sub = this.route.params.subscribe(params =&gt; {\r\n    if (params['term']) {\r\n      this.query = decodeURIComponent(params['term']);\r\n      this.search();\r\n    }\r\n  });\r\n}\r\n</code></pre>\n<p>You&#8217;ll want to implement <code>OnDestroy</code> and define the <code>ngOnDestroy</code> method to clean up this subscription.</p>\n<pre><code class=\"typescript language-typescript\">import { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\nexport class SearchComponent implements OnInit, OnDestroy {\r\n...\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n}\r\n</code></pre>\n<p>After making all these changes, you should be able to search/edit/update a person&#8217;s information. If it works &#8211; nice job!</p>\n<h3 id=\"formvalidation\">Form Validation</h3>\n<p>One thing you might notice is you can clear any input element in the form and save it. At the very least, the <code>name</code> field should be required. Otherwise, there&#8217;s nothing to click on in the search results.</p>\n<p>To make name required, modify <code>edit.component.html</code> to add a <code>required</code> attribute to the name <code>&lt;input&gt;</code>.</p>\n<pre><code class=\"markup language-markup\">&lt;input [(ngModel)]=\"editName\" name=\"name\" id=\"name\" placeholder=\"name\" required/&gt;\r\n</code></pre>\n<p>You&#8217;ll also need to wrap everything in a <code>&lt;form&gt;</code> element. Add <code>&lt;form&gt;</code> after the <code>&lt;h3&gt;</code> tag and close it before the last <code>&lt;/div&gt;</code>. You&#8217;ll also need to add an <code>(ngSubmit)</code> handler to the form and change the save button to be a regular submit button.</p>\n<pre><code class=\"markup language-markup\">&lt;h3&gt;{{editName}}&lt;/h3&gt;\r\n&lt;form (ngSubmit)=\"save()\" ngNativeValidate&gt;\r\n  ...\r\n  &lt;button type=\"submit\" id=\"save\"&gt;Save&lt;/button&gt;\r\n  &lt;button (click)=\"cancel()\" id=\"cancel\"&gt;Cancel&lt;/button&gt;\r\n&lt;/form&gt;\r\n</code></pre>\n<p>After making these changes, any field with a <code>required</code> attribute will be required.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398368Okta-SP2_Img6_edit-form-validation-1024x570.png\" alt=\"Edit Form Validation\" width=\"1024\" height=\"570\" class=\"alignnone size-large wp-image-160103\" /></p>\n<p>In this screenshot, you might notice the address fields are blank. This is explained by the error in your console.</p>\n<pre><code>If ngModel is used within a form tag, either the name attribute must be set or the form\r\ncontrol must be defined as 'standalone' in ngModelOptions.\r\n\r\nExample 1: &lt;input [(ngModel)]=\"person.firstName\" name=\"first\"&gt;\r\nExample 2: &lt;input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\"&gt;\r\n</code></pre>\n<p>To fix, add a <code>name</code> attribute to all the address fields. For example:</p>\n<pre><code class=\"markup language-markup\">&lt;address&gt;\r\n  &lt;input [(ngModel)]=\"editAddress.street\" name=\"street\" id=\"street\"&gt;&lt;br/&gt;\r\n  &lt;input [(ngModel)]=\"editAddress.city\" name=\"city\" id=\"city\"&gt;,\r\n  &lt;input [(ngModel)]=\"editAddress.state\" name=\"state\" id=\"state\" size=\"2\"&gt;\r\n  &lt;input [(ngModel)]=\"editAddress.zip\" name=\"zip\" id=\"zip\" size=\"5\"&gt;\r\n&lt;/address&gt;\r\n</code></pre>\n<p>Now values should display in all fields and <code>name</code> should be required.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398410Okta-SP2_Img7_edit-form-names-1024x537.png\" alt=\"Edit Form Names\" width=\"1024\" height=\"537\" class=\"alignnone size-large wp-image-160104\" /></p>\n<p>If you want to provide your own validation messages instead of relying on the browser’s, complete the following steps:</p>\n<ol>\n<li>Remove <code>ngNativeValidate</code> and add <code>#editForm=\"ngForm\"</code> to the <code>&lt;form&gt;</code> element.</li>\n<li>Add <code>#name=\"ngModel\"</code> to the <code>&lt;input id=\"name\"&gt;</code> element.</li>\n<li>Add <code>[disabled]=\"!editForm.form.valid\"</code> to the <em>Save</em> button.</li>\n<li>Add the following under the <code>name</code> field to display a validation error.</li>\n</ol>\n<pre><code class=\"markup language-markup\">&lt;div [hidden]=\"name.valid || name.pristine\" style=\"color: red\"&gt;\r\n  Name is required\r\n&lt;/div&gt;\r\n</code></pre>\n<p>To learn more about forms and validation, see <a href=\"https://angular.io/docs/ts/latest/guide/forms.html\">Angular forms documentation</a>.</p>\n<h2 id=\"createanopenidconnectappinokta\">Create an OpenID Connect App in Okta</h2>\n<p>OpenID Connect (OIDC) is built on top of the OAuth 2.0 protocol. It allows clients to verify the identity of the user and, as well as to obtain their basic profile information. To learn more, see <a href=\"https://openid.net/connect/\">https://openid.net/connect</a>.</p>\n<p>To integrate <a href=\"https://developer.okta.com\">Okta</a> for user authentication, you&#8217;ll first need to <a href=\"https://developer.okta.com/signup/\">register</a> and create an OIDC application.</p>\n<p>Login to your Okta account, or <a href=\"https://developer.okta.com/signup/\">create one</a> if you don’t have one. Navigate to <strong>Applications</strong> and click on the <strong>Add Application</strong> button. Select <strong>SPA</strong> and click <strong>Next</strong>. On the next page, specify <code>http://localhost:4200</code> as a Base URI, Login redirect URI, and Logout redirect URI. Click <strong>Done</strong> and you should see settings like the following.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/10/1506904470Okta-SP2_Img8_oidc-settings-906x1024.png\" alt=\"OIDC App Settings\" width=\"906\" height=\"1024\" class=\"alignnone size-large wp-image-160387\" /></p>\n<p>Install <a href=\"https://github.com/manfredsteyer\">Manfred Steyer&#8217;s</a> project to <a href=\"https://github.com/manfredsteyer/angular-oauth2-oidc\">add OAuth 2 and OpenID Connect support</a> using npm.</p>\n<pre><code class=\"bash language-bash\">npm install --save angular-oauth2-oidc\r\n</code></pre>\n<p>Modify <code>src/app/app.component.ts</code> to import <code>OAuthService</code> and configure your app to use your Okta application&#8217;s settings. </p>\n<pre><code class=\"typescript language-typescript\">import { OAuthService, JwksValidationHandler } from 'angular-oauth2-oidc';\r\n\r\n...\r\n\r\n  constructor(private oauthService: OAuthService) {\r\n    this.oauthService.redirectUri = window.location.origin;\r\n    this.oauthService.clientId = '{client-id}';\r\n    this.oauthService.scope = 'openid profile email';\r\n    this.oauthService.issuer = 'https://dev-{dev-id}.oktapreview.com';\r\n    this.oauthService.tokenValidationHandler = new JwksValidationHandler();\r\n\r\n    // Load Discovery Document and then try to login the user\r\n    this.oauthService.loadDiscoveryDocument().then(() =&gt; {\r\n      this.oauthService.tryLogin();\r\n    });\r\n  }\r\n...\r\n</code></pre>\n<p>Create <code>src/app/home/home.component.ts</code> and configure it to have <strong>Login</strong> and <strong>Logout</strong> buttons.</p>\n<pre><code class=\"typescript language-typescript\">import { Component } from '@angular/core';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\n\r\n@Component({\r\n  template: `\r\n    &lt;div *ngIf=\"givenName\"&gt;\r\n      &lt;h2&gt;Welcome, {{givenName}}!&lt;/h2&gt;\r\n      &lt;button (click)=\"logout()\"&gt;Logout&lt;/button&gt;\r\n      &lt;p&gt;&lt;a routerLink=\"/search\" routerLinkActive=\"active\"&gt;Search&lt;/a&gt;&lt;/p&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;div *ngIf=\"!givenName\"&gt;\r\n      &lt;button (click)=\"login()\"&gt;Login&lt;/button&gt;\r\n    &lt;/div&gt;`\r\n})\r\nexport class HomeComponent {\r\n\r\n  constructor(private oauthService: OAuthService) {\r\n  }\r\n\r\n  login() {\r\n    this.oauthService.initImplicitFlow();\r\n  }\r\n\r\n  logout() {\r\n    this.oauthService.logOut();\r\n  }\r\n\r\n  get givenName() {\r\n    const claims = this.oauthService.getIdentityClaims();\r\n    if (!claims) {\r\n      return null;\r\n    }\r\n    return claims['name'];\r\n  }\r\n}\r\n</code></pre>\n<p>Create <code>src/app/shared/auth/auth.guard.service.ts</code> to navigate to the <code>HomeComponent</code> if the user is not authenticated.</p>\n<pre><code class=\"typescript language-typescript\">import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private oauthService: OAuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.oauthService.hasValidIdToken()) {\r\n      return true;\r\n    }\r\n\r\n    this.router.navigate(['/home']);\r\n    return false;\r\n  }\r\n}\r\n</code></pre>\n<p>Export <code>AuthGuard</code> in <code>src/shared/index.ts</code>:</p>\n<pre><code class=\"typescript language-typescript\">export * from './auth/auth.guard.service';\r\n</code></pre>\n<p>Import the <code>OAuthModule</code> in <code>src/app/app.module.ts</code>, configure the new <code>HomeComponent</code>, and lock the <code>/search</code> and <code>/edit</code> routes down with the <code>AuthGuard</code>.</p>\n<pre><code class=\"typescript language-typescript\">import { OAuthModule } from 'angular-oauth2-oidc';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { SearchService, AuthGuard } from './shared';\r\n\r\nconst appRoutes: Routes = [\r\n  {path: 'search', component: SearchComponent, canActivate: [AuthGuard]},\r\n  {path: 'edit/:id', component: EditComponent, canActivate: [AuthGuard]},\r\n  {path: 'home', component: HomeComponent},\r\n  {path: '', redirectTo: 'home', pathMatch: 'full'},\r\n  {path: '**', redirectTo: 'home'}\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...\r\n    HomeComponent\r\n  ],\r\n  imports: [\r\n    ...\r\n    OAuthModule.forRoot()\r\n  ],\r\n  providers: [\r\n    AuthGuard,\r\n    SearchService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n</code></pre>\n<p>After making these changes, you should be able to run <code>ng serve</code> and see a login button.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398498Okta-SP2_Img9_okta-login-button-1024x421.png\" alt=\"Okta Login button\" width=\"1024\" height=\"421\" class=\"alignnone size-large wp-image-160106\" /></p>\n<p>Click the <strong>Login</strong> button and sign-in with one of the people that&#8217;s configured in your Okta application.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398541Okta-SP2_Img10_okta-login-form-1024x760.png\" alt=\"Okta Login Form\" width=\"1024\" height=\"760\" class=\"alignnone size-large wp-image-160107\" /></p>\n<p>After logging in, you&#8217;ll be able to click <em>Search</em> and view people&#8217;s information.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398578Okta-SP2_Img11_okta-post-login-1024x393.png\" alt=\"Okta Post Login\" width=\"1024\" height=\"393\" class=\"alignnone size-large wp-image-160108\" /></p>\n<p>If it works &#8211; great! If you want to build your own login form in your app, continue reading to learn how to use the <a href=\"https://github.com/okta/okta-auth-js\">Okta Auth SDK</a> with <code>OAuthService</code>.</p>\n<h3 id=\"authenticationwiththeoktaauthsdk\">Authentication with the Okta Auth SDK</h3>\n<p>The Okta Auth SDK builds on top of Otka&#8217;s <a href=\"https://developer.okta.com/docs/api/resources/authn.html\">Authentication API</a> and <a href=\"https://developer.okta.com/docs/api/resources/oidc.html\">OAuth 2.0 API</a> to enable you to create a fully branded sign-in experience using JavaScript.</p>\n<p>Install it using npm:</p>\n<pre><code class=\"bash language-bash\">npm install @okta/okta-auth-js --save\r\n</code></pre>\n<p>Add a reference to this library’s main JavaScript file in <code>.angular-cli.json</code>:</p>\n<pre><code class=\"javascript language-javascript\">\"scripts\": [\r\n  \"../node_modules/@okta/okta-auth-js/dist/okta-auth-js.min.js\"\r\n],\r\n</code></pre>\n<p>The components in this section use Bootstrap CSS classes. Install Bootstrap 4.</p>\n<pre><code class=\"bash language-bash\">npm install bootstrap@4.0.0-beta --save\r\n</code></pre>\n<p>Modify <code>src/styles.css</code> to add a reference to Bootstrap’s CSS file.</p>\n<pre><code class=\"css language-css\">@import \"~bootstrap/dist/css/bootstrap.css\";\r\n</code></pre>\n<p>Update <code>src/app/app.component.html</code> to use Bootstrap classes for its navbar and grid system.</p>\n<pre><code class=\"markup language-markup\">&lt;nav class=\"navbar navbar-light bg-secondary\"&gt;\r\n  &lt;a class=\"navbar-brand text-light\" href=\"#\"&gt;Welcome to {{title}}!&lt;/a&gt;\r\n&lt;/nav&gt;\r\n&lt;div class=\"container-fluid\"&gt;\r\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Create <code>src/app/shared/auth/okta.auth.wrapper.ts</code> to wrap the Okta Auth SDK and integrate it with <code>OAuthService</code>. Its <code>login()</code> method uses <code>OktaAuth</code> to get a session token and exchange it for ID and access tokens.</p>\n<pre><code class=\"typescript language-typescript\">import { OAuthService } from 'angular-oauth2-oidc';\r\nimport { Injectable } from '@angular/core';\r\n\r\ndeclare const OktaAuth: any;\r\n\r\n@Injectable()\r\nexport class OktaAuthWrapper {\r\n\r\n  private authClient: any;\r\n\r\n  constructor(private oauthService: OAuthService) {\r\n    this.authClient = new OktaAuth({\r\n      url: this.oauthService.issuer\r\n    });\r\n  }\r\n\r\n  login(username: string, password: string): Promise&lt;any&gt; {\r\n    return this.oauthService.createAndSaveNonce().then(nonce =&gt; {\r\n      return this.authClient.signIn({\r\n        username: username,\r\n        password: password\r\n      }).then((response) =&gt; {\r\n        if (response.status === 'SUCCESS') {\r\n          return this.authClient.token.getWithoutPrompt({\r\n            clientId: this.oauthService.clientId,\r\n            responseType: ['id_token', 'token'],\r\n            scopes: ['openid', 'profile', 'email'],\r\n            sessionToken: response.sessionToken,\r\n            nonce: nonce,\r\n            redirectUri: window.location.origin\r\n          })\r\n            .then((tokens) =&gt; {\r\n              const idToken = tokens[0].idToken;\r\n              const accessToken = tokens[1].accessToken;\r\n              const keyValuePair = `#id_token=${encodeURIComponent(idToken)}&amp;access_token=${encodeURIComponent(accessToken)}`;\r\n              return this.oauthService.tryLogin({ &lt;1&gt;\r\n                customHashFragment: keyValuePair,\r\n                disableOAuth2StateCheck: true\r\n              });\r\n            });\r\n        } else {\r\n          return Promise.reject('We cannot handle the ' + response.status + ' status');\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n</code></pre>\n<p>In the above code, <code>oauthService.tryLogin()</code> parses and stores the <code>idToken</code> and <code>accessToken</code> so they can be retrieved using <code>OAuthService.getIdToken()</code> and <code>OAuthService.getAccessToken()</code>.</p>\n<p>Export <code>OktaAuthWrapper</code> in <code>src/shared/index.ts</code>:</p>\n<pre><code class=\"typescript language-typescript\">export * from './auth/okta.auth.wrapper';\r\n</code></pre>\n<p>Add <code>OktaAuthWrapper</code> as a provider in <code>app.module.ts</code>.</p>\n<pre><code class=\"typescript language-typescript\">import { SearchService, AuthGuard, OktaAuthWrapper } from './shared';\r\n\r\n@NgModule({\r\n  ...\r\n  providers: [\r\n    ...\r\n    OktaAuthWrapper\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\n</code></pre>\n<p>Change <code>HomeComponent</code> to declare <code>OktaAuth</code> and modify its <code>template</code> so it has a button to login, as well as a sign-in form.</p>\n<pre><code class=\"typescript language-typescript\">@Component({\r\n  template: `\r\n    &lt;div *ngIf=\"givenName\" class=\"col-12 mt-2\"&gt;\r\n      &lt;button (click)=\"logout()\" class=\"btn btn-sm btn-outline-primary float-right\"&gt;Logout&lt;/button&gt;\r\n      &lt;h2&gt;Welcome, {{givenName}}!&lt;/h2&gt;\r\n      &lt;p&gt;&lt;a routerLink=\"/search\" routerLinkActive=\"active\"&gt;Search&lt;/a&gt;&lt;/p&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=\"card mt-2\" *ngIf=\"!givenName\"&gt;\r\n      &lt;div class=\"card-body\"&gt;\r\n        &lt;h4 class=\"card-title\"&gt;Login with Authorization Server&lt;/h4&gt;\r\n        &lt;button class=\"btn btn-primary\" (click)=\"login()\"&gt;Login&lt;/button&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=\"card mt-2\" *ngIf=\"!givenName\"&gt;\r\n      &lt;div class=\"card-body\"&gt;\r\n        &lt;h4 class=\"card-title\"&gt;Login with Username/Password&lt;/h4&gt;\r\n\r\n        &lt;p class=\"alert alert-error\" *ngIf=\"loginFailed\"&gt;\r\n          Login wasn't successful.\r\n        &lt;/p&gt;\r\n\r\n        &lt;div class=\"form-group\"&gt;\r\n          &lt;label&gt;Username&lt;/label&gt;\r\n          &lt;input class=\"form-control\" [(ngModel)]=\"username\"&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"form-group\"&gt;\r\n          &lt;label&gt;Password&lt;/label&gt;\r\n          &lt;input class=\"form-control\" type=\"password\" [(ngModel)]=\"password\"&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"form-group\"&gt;\r\n          &lt;button class=\"btn btn-primary\" (click)=\"loginWithPassword()\"&gt;Login&lt;/button&gt;\r\n        &lt;/div&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;`\r\n})\r\n</code></pre>\n<p>After making these changes, the <code>HomeComponent</code> should render as follows.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398616Okta-SP2_Img12_sign-in-form-1024x752.png\" alt=\"Custom sign-in Form\" width=\"1024\" height=\"752\" class=\"alignnone size-large wp-image-160109\" /></p>\n<p>Add local variables for the username and password fields, import <code>OktaAuthWrapper</code>, and implement a <code>loginWithPassword()</code> method in <code>HomeComponent</code>.</p>\n<pre><code class=\"typescript language-typescript\">import { OktaAuthWrapper } from '../shared';\r\n...\r\n\r\nusername;\r\npassword;\r\n\r\nconstructor(private oauthService: OAuthService,\r\n            private oktaAuthWrapper: OktaAuthWrapper) {\r\n}\r\n\r\nloginWithPassword() {\r\n  this.oktaAuthWrapper.login(this.username, this.password)\r\n    .then(_ =&gt; console.debug('logged in'))\r\n    .catch(err =&gt; console.error('error logging in', err));\r\n}\r\n</code></pre>\n<p>You should be able to sign in using the form, using one of your app&#8217;s registered users. After logging in, you&#8217;ll be able to click the <strong>Search</strong> link and view people&#8217;s information.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398654Okta-SP2_Img13_sign-in-form-success-1024x433.png\" alt=\"View after sign-in\" width=\"1024\" height=\"433\" class=\"alignnone size-large wp-image-160110\" /></p>\n<h2 id=\"angularokta\">Angular + Okta</h2>\n<p>If everything works &#8211; congrats! If you encountered issues, please post a question to Stack Overflow with an <a href=\"http://stackoverflow.com/questions/tagged/okta\">okta tag</a>, or hit me up on Twitter <a href=\"https://twitter.com/mraible\">@mraible</a>.</p>\n<p>You can find a completed version of the application created in this blog post <a href=\"https://github.com/oktadeveloper/okta-angular-openid-connect-example\">on GitHub</a>. To learn more about security in Angular, see <a href=\"https://angular.io/guide/security\">Angular’s Security documentation</a>. If you’d like to learn more about OpenID Connect, I’d recommend watching the soothing video below.</p>\n<div style=\"max-width: 560px; margin: 0 auto\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kb56GzQ2pSk\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p class=\"wp-special\"><em>This article was originally published on <a href=\"https://developer.okta.com/blog/2017/04/17/angular-authentication-with-oidc\" rel=\"canonical\">OKTA Blog</a>. Thank you for supporting the partners who make SitePoint possible.</em></p>\n<p>Angular (formerly called Angular 2.0) is quickly becoming one of the most powerful ways to build a modern single-page app. A core strength is Angular’s focus on building reusable components, which help you decouple the various concerns in your application. Take authentication, for example: it can be painful to build, but once you wrap it in a component, the authentication logic can be reused throughout your application.</p>\n<p>The Angular CLI makes it easy to scaffold new components, and even entire projects. If you haven’t used the Angular CLI to quickly generate Angular code, you’re in for a treat!</p>\n<p>In this example, you’ll build a simple web application with Angular CLI, a tool for Angular development. You’ll create an application with search and edit features, then add authentication.</p>\n<h2 id=\"create-an-angular-application\">Create an Angular Application</h2>\n<p><em>TIP: If you’d like to skip building the Angular application and get right to adding authentication, you can clone my <code class=\"highlighter-rouge\">ng-demo</code> project, then skip to the <a href=\"#create-an-openid-connect-app-in-okta\">Create an OpenID Connect App in Okta</a> section.</em></p>\n<pre><code>git clone https://github.com/mraible/ng-demo.git\r\n</code></pre>\n<h3 id=\"what-youll-need\">What You’ll Need</h3>\n<ul>\n<li>About 20 minutes</li>\n<li>A favorite text editor or IDE. I recommend <a href=\"https://www.jetbrains.com/idea/\">IntelliJ IDEA</a></li>\n<li><a href=\"https://nodejs.org\">Node.js</a> and npm installed. I recommend using <a href=\"https://github.com/creationix/nvm\">nvm</a></li>\n<li><a href=\"https://cli.angular.io/\">Angular CLI</a> installed. If you don’t have Angular CLI installed, install it using <code>npm install -g @angular/cli</code></li>\n</ul>\n<p>Create a new project using the <code>ng new</code> command:</p>\n<pre><code>ng new ng-demo\r\n</code></pre>\n<p>This will create a <code>ng-demo</code> project and run <code>npm install</code> in it. It should take about a minute to complete, but that could vary depending on your connection speed.</p>\n<pre><code>[mraible:~/dev] $ ng new ng-demo\r\ninstalling ng\r\n  create .editorconfig\r\n  create README.md\r\n  create src/app/app.component.css\r\n  create src/app/app.component.html\r\n  create src/app/app.component.spec.ts\r\n  create src/app/app.component.ts\r\n  create src/app/app.module.ts\r\n  create src/assets/.gitkeep\r\n  create src/environments/environment.prod.ts\r\n  create src/environments/environment.ts\r\n  create src/favicon.ico\r\n  create src/index.html\r\n  create src/main.ts\r\n  create src/polyfills.ts\r\n  create src/styles.css\r\n  create src/test.ts\r\n  create src/tsconfig.app.json\r\n  create src/tsconfig.spec.json\r\n  create src/typings.d.ts\r\n  create .angular-cli.json\r\n  create e2e/app.e2e-spec.ts\r\n  create e2e/app.po.ts\r\n  create e2e/tsconfig.e2e.json\r\n  create .gitignore\r\n  create karma.conf.js\r\n  create package.json\r\n  create protractor.conf.js\r\n  create tsconfig.json\r\n  create tslint.json\r\nSuccessfully initialized git.\r\nInstalling packages for tooling via npm.\r\nInstalled packages for tooling via npm.\r\nYou can `ng set --global packageManager=yarn`.\r\nProject 'ng-demo' successfully created.\r\n[mraible:~] 46s $\r\n</code></pre>\n<p>You can see the what version of Angular CLI you’re using with <code>ng --version</code>.</p>\n<pre><code>$ ng --version\r\n\r\n   / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\r\n  / △ \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\r\n / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\r\n/_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\r\n               |___/\r\n@angular/cli: 1.3.2\r\nnode: 8.4.0\r\nos: darwin x64\r\n</code></pre>\n<p></p>\n<h2>Run Your Angular Application</h2>\n<p>The project is configured with <a href=\"https://webpack.github.io/docs/webpack-dev-server.html\">webpack dev server</a>. To start it, make sure you’re in the <code>ng-demo</code> directory, then run:</p>\n<pre><code>ng serve\r\n</code></pre>\n<p>You should see a screen like the one below at <a href=\"http://localhost:4200\">http://localhost:4200</a>.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398057Okta-SP2_Img1_default-homepage-1024x667.png\" alt=\"Default Homepage\" width=\"1024\" height=\"667\" class=\"alignnone size-large wp-image-160097\" /></p>\n<p>You can make sure your new project’s tests pass, run <code>ng test</code>:</p>\n<pre><code>$ ng test\r\n...\r\nChrome 60.0.3112 (Mac OS X 10.12.6): Executed 3 of 3 SUCCESS (0.239 secs / 0.213 secs)\r\n</code></pre>\n<h2>Add a Search Feature</h2>\n<p>To add a search feature, open the project in an IDE or your favorite text editor. For IntelliJ IDEA, use File &gt; New Project &gt; Static Web and point to the <code>ng-demo</code> directory.</p>\n<p>In a terminal window, cd into your project’s directory and run the following command. This will create a search component.</p>\n<pre><code>$ ng g component search\r\ninstalling component\r\n  create src/app/search/search.component.css\r\n  create src/app/search/search.component.html\r\n  create src/app/search/search.component.spec.ts\r\n  create src/app/search/search.component.ts\r\n  update src/app/app.module.ts\r\n</code></pre>\n<p>Open <code>src/app/search/search.component.html</code> and replace its default HTML with the following:</p>\n<pre><code>\r\n&lt;h2&gt;Search&lt;/h2&gt;\r\n&lt;form&gt;\r\n  &lt;input type=\"search\" name=\"query\"[(ngModel)]=\"query\"(keyup.enter)=\"search()\"&gt;\r\n  &lt;button type=\"button\"(click)=\"search()\"Search&lt;/button&gt;\r\n&lt;/form&gt;\r\n&lt;pre&gt;{{searchResults | json}}&lt;/pre&gt;\r\n</code></pre>\n<p>The <a href=\"https://angular.io/docs/ts/latest/guide/router.html\">Router documentation</a> for Angular provides the information you need to setup a route to the <code>SearchComponent</code> you just generated. Here’s a quick summary:</p>\n<p>In <code>src/app/app.module.ts</code>, add an <code>appRoutes</code> constant and import it in <code>@NgModule</code>:</p>\n<pre><code>import{ Routes, RouterModule } from @angular/router'; \r\n\r\nconst appRoutes: Routes = [ \r\n   {path: 'search', component: SearchComponent},\r\n   {path: '', redirectTo: '/search', pathMatch: 'full'}\r\n];\r\n\r\n@NgModule({\r\n  ...\r\n  imports: [\r\n   ...\r\n   RouterModule.forRoot(appRoutes)\r\n  ]\r\n  ...\r\n})\r\nexportclass AppModule { } \r\n</code></pre>\n<p>In <code>src/app/app.component.html</code>, adjust the placeholder content and add a <code>&lt;router-outlet&gt;</code> tag to display routes.</p>\n<pre><code>&lt;h1&gt;>Welcome to !&lt;/h1&gt;\r\n&lt;!-- Routed views go here --&gt;\r\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</code></pre>\n<p>Now that you have routing setup, you can continue writing the search feature.</p>\n<p>If you still have <code>ng serve</code> running, your browser should refresh automatically. If not, navigate to http://localhost:4200. You will likely see a blank screen. Open your JavaScript console and you’ll see the problem.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398171Okta-SP2_Img2_ngmodel-error-1024x535.png\" alt=\"NG Model Error\" width=\"1024\" height=\"535\" class=\"alignnone size-large wp-image-160098\" /></p>\n<p>To solve this, open <code>src/app/app.module.ts</code> and add <code>FormsModule</code> as an import in <code>@NgModule</code>:</p>\n<pre><code>import { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  ...\r\n  imports: [ \r\n   ...\r\n   FormsModule\r\n  ]\r\n  ...\r\n})\r\nexport class AppModule { } \r\n</code></pre>\n<p>Now you should see the search form.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506398227Okta-SP2_Img3_search-without-css-1024x390.png\" alt=\"Search Without CSS\" width=\"1024\" height=\"390\" class=\"alignnone size-large wp-image-160099\" /></p>\n<p>If you want to add CSS for this components, open <code>src/app/search/search.component.css</code> and add some CSS. For example:</p>\n<pre><code>host {\r\n  display: block;\r\n  padding: 0 20px;\r\n}\r\n</code></pre>\n<p>This section has shown you how to generate a new component to a basic Angular application with Angular CLI. The next section will show you how to create a use a JSON file and <code>localStorage</code> to create a fake API.</p>\n<p>To get search results, create a <code>SearchService</code> that makes HTTP requests to a JSON file. Start by generating a new service.</p>\n<pre><code>$ ng g service search\r\ninstalling service\r\n  create src/app/search.service.spec.ts\r\n  create src/app/search.service.ts\r\n  WARNING Service is generated but not provided, it must be provided to be used\r\n</code></pre>\n<p>Move the generated <code>search.service.ts</code> and its test to <code>app/shared/search</code>. You’ll need to create this directory.</p>\n<pre><code>mkdir -p src/app/shared/search\r\nmv src/app/search.service.* src/app/shared/search/.\r\n</code></pre>\n<p>Create <code>src/assets/data/people.json</code> to hold your data.</p>\n<pre><code>[\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"Peyton Manning\",\r\n    phone\": \"(303) 567-8910\",\r\n    \"address\": {\r\n      \"street\": \"1234 Main Street\",\r\n      \"city\": \"Greenwood Village\",\r\n      \"state\": \"CO\",\r\n      \"zip\": \"80111\"\r\n    }\r\n  },\r\n  {\r\n    id\": 2,\r\n    \"name\": \"Demaryius Thomas\",\r\n    \"phone\": \"(720) 213-9876\",\r\n    \"address\": {\r\n      \"street\": \"5555 Marion Street\",\r\n      \"city\": \"Denver\",\r\n      \"state\": \"CO\",\r\n      \"zip\": \"80202\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"Von Miller\",\r\n    \"phone\": \"(917) 323-2333\",\r\n    \"address\": {\r\n      \"street\": \"14 Mountain Way\",\r\n      \"city\": \"Vail\",\r\n      \"state\": \"CO\",\r\n      \"zip\": \"81657\"\r\n    }\r\n  }\r\n]\r\n</code></pre>\n<p>Modify <code>src/app/shared/search/search.service.ts</code> and provide <code>Http</code> as a dependency in its constructor. In this same file, create a <code>getAll()</code> method to gather all the people. Also, define the <code>Address</code> and <code>Person</code> classes that JSON will be marshalled to.</p>\n<pre><code>import { Injectable } from '@angular/core';\r\nimport { Http, Response } >from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class SearchService {\r\n  constructor(private http: Http) {}\r\n\r\n  getAll() {\r\n    return this.http.get('assets/data/people.json')\r\n        .map((res: Response) =&gt; res.json());\r\n  }\r\n}\r\n\r\nexport class Address {\r\n  street: string;\r\n  city: string;\r\n  state: string;\r\n  zip: string;\r\n\r\n  constructor(obj?: any) {\r\n    this.street = obj &amp;&amp; obj.street|| null;\r\n    this.city = obj &amp;&amp; obj.city || null;\r\n    this.state = obj &amp;&amp; obj.state || null; \r\n    this.zip = obj &amp;&amp; obj.zip || null;\r\n  }\r\n}\r\n\r\nexport class Person {\r\n  id: number;\r\n  name: string;\r\n  phone: string;\r\n  address: Address;\r\n\r\n  constructor(obj?: any) {\r\n    this.id = obj &amp;&amp; Number(obj.id) || null;\r\n    this.name = obj &amp;&amp; obj.name || null;\r\n    this.phone = obj &amp;&amp; obj.phone || null;\r\n    this.address = obj &amp;&amp; obj.address || null;\r\n  }\r\n}\r\n</code></pre>\n<p>To make these classes available for consumption by your components, edit <code>src/app/shared/index.ts</code> and add the following:</p>\n<pre><code>export * from './search/search.service';\r\n</code></pre>\n<p>The reason for creating this file is so you can import multiple classes on a single line rather than having to import each individual class on separate lines.</p>\n<p>In <code>src/app/search/search.component.ts</code>, add imports for these classes.</p>\n<pre><code>import { Person, SearchService } from '../shared';\r\n</code></pre>\n<p>You can now add <code>query</code> and <code>searchResults</code> variables. While you’re there, modify the constructor to inject the <code>SearchService</code>.</p>\n<pre><code>export class SearchComponent implements OnInit {\r\n  query: string;\r\n  searchResults: Array&lt;Person&gt;;\r\n\r\n  constructor(private searchService: SearchService) {}\r\n</code></pre>\n<p>Then implement a <code>search()</code> method to call the service’s <code>getAll()</code> method.</p>\n<pre><code>search(): void {\r\n  this.searchService.getAll().subscribe(\r\n\r\n    data =&gt; { this.searchResults = data; },\r\n    error =&gt; console.log(error)\r\n  );\r\n}\r\n</code></pre>\n",
    "protected": false
    },
    "author": 72588,
    "featured_media": 160197,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    768,
    407,
    422
    ],
    "tags": [
    11546,
    6152,
    10802,
    1753,
    11564,
    11548,
    6746,
    11563,
    890,
    6298,
    1874,
    11547
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160096"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/72588"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160096"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160096/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160197"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160096"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160096"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160096"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160230,
    "date": "2017-10-02T11:00:00",
    "date_gmt": "2017-10-02T18:00:00",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160230"
    },
    "modified": "2017-10-02T23:53:49",
    "modified_gmt": "2017-10-03T06:53:49",
    "slug": "6-pro-tips-from-react-developers",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/6-pro-tips-from-react-developers/",
    "title": {
    "rendered": "6 Pro Tips from React Developers"
    },
    "content": {
    "rendered": "<p><em>We&#8217;ve teamed up with <a href=\"http://bit.ly/2xc99Ki\">Open SourceCraft</a> to bring you <strong>6 Pro Tips from React Developers</strong>.</em></p>\n<p>If you’re new to React, you could benefit from learning from the success—and failures—of React developers who’ve learned valuable lessons about the framework.</p>\n<div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https://www.youtube.com/embed/xa-_FIy2NgE?ecver=2\" width=\"640\" height=\"360\" frameborder=\"0\" style=\"position:absolute;width:100%;height:100%;left:0\" allowfullscreen></iframe></div>\n<p></p>\n<p class=\"wp-special\">P.S. For a high-quality, in-depth introduction to React, you can&#8217;t go past Canadian full-stack developer Wes Bos. <a href=\"https://ReactForBeginners.com/friend/SITEPOINT\">Try his course here</a>, and use the code<strong> SITEPOINT</strong> to get <strong>25% off </strong>and to help support SitePoint.</p>\n<h2>Tip 1: Use functional components</h2>\n<h3>Cam Jackson</h3>\n<p>If you don’t need internal state or lifecycle methods on your component, use a functional component instead. A functional component is a pure JavaScript function that accept <code>props</code> as its argument and returns a React element.</p>\n<p><strong>Benefits of functional components:</strong></p>\n<ul>\n<li>Less code</li>\n<li>Easier to understand</li>\n<li>The component is stateless, so you avoid accidentally storing state on a component you shouldn’t</li>\n<li>The component is simpler to test</li>\n<li>There’s no <code>this</code> binding</li>\n<li>It’s easier to see where and when to extract smaller components</li>\n</ul>\n<h2>Tip 2: Keep your components small</h2>\n<h3>Randy Coulman</h3>\n<p><strong>Small components are easier to:</strong></p>\n<ul>\n<li>Read</li>\n<li>Test</li>\n<li>Maintain</li>\n<li>Reuse</li>\n</ul>\n<p>Extracting components will make your app more organized, more modular, and more structurally sound. Keep Tip 1 in mind and extract blocks of code into functional components whenever possible.</p>\n<h2>Tip 3: Understand how to handle <code>this</code></h2>\n<h3>Cory House</h3>\n<p>The first way to handle <code>this</code> is to not handle it at all and use a functional component instead (see why that’s Tip No. 1?).</p>\n<p>But if you <em>are</em> using an ES6 class, you’ll need to bind <code>this</code> manually since React doesn’t autobind the functions inside that component.</p>\n<p>There are several methods for doing so.</p>\n<ol>\n<li>Bind in render</li>\n<li>Use an arrow function in render</li>\n<li>Bind in constructor</li>\n<li>Use arrow function in class property</li>\n</ol>\n<p>Check out the video to see these methods in practice.</p>\n<h2>Tip 4: Use a function in <code>setState</code>, not an object</h2>\n<h3>Sophia Shoemaker</h3>\n<p>According to the React docs, React does not guarantee that state changes are applied immediately.</p>\n<p>Therefore, reading <code>this.state</code> right after calling <code>setState()</code> is a potential pitfall because <code>this.state</code> may not be what you think it is.</p>\n<p>So instead of updating state with an object, update it with a function to avoid this potential pitfall.</p>\n<h2>Tip 5: Utilyze prop-types</h2>\n<h3>Adam Jahr</h3>\n<p><code>prop-types</code> is a library for typechecking props and can help prevent bugs by ensuring you are using the right datatypes for your props. This is an external package that you can install through npm or otherwise. Simply import the package, then add propTypes to your component and typeset accordingly. If you want the prop to be required, just add <code>.isRequired</code>.</p>\n<h2>Tip 6: Use React Developer tools</h2>\n<h3>Brian Gates</h3>\n<p>With <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">React Developer Tools</a>, available as a Google Chrome and Firefox extension, as well as a standalone app for other environments, you can quickly view your component hierarchy, inspect and edit a component’s props and state, and invoke methods on a component within the DevTools.</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p>We&#8217;ve teamed up with Open SourceCraft to bring you 6 Pro Tips from React Developers.<br />\nTip 1: Use functional components<br />\nTip 2: Keep your components small<br />\nTip 3: Understand how to handle this</p>\n",
    "protected": false
    },
    "author": 72589,
    "featured_media": 160269,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407,
    4271
    ],
    "tags": [
    11567,
    9802,
    801
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160230"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/72589"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160230"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160230/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160269"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160230"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160230"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160230"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160395,
    "date": "2017-10-02T08:00:58",
    "date_gmt": "2017-10-02T15:00:58",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160395"
    },
    "modified": "2017-10-01T19:21:19",
    "modified_gmt": "2017-10-02T02:21:19",
    "slug": "an-introduction-to-jsx",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/an-introduction-to-jsx/",
    "title": {
    "rendered": "An Introduction to JSX"
    },
    "content": {
    "rendered": "<p><em>For a high-quality, in-depth introduction to React, you can’t go past Canadian full-stack developer Wes Bos. <a href=\"https://ReactForBeginners.com/friend/SITEPOINT\">Try his course here</a>, and use the code<strong> SITEPOINT</strong> to get <strong>25% off</strong> and to help support SitePoint.</em></p>\n<p><strong>When React was first introduced, one of the features that caught most people&#8217;s attention (and drew the most criticism) was JSX. If you&#8217;re learning React, or have ever seen any code examples, you probably did a double-take at the syntax. What is this strange amalgamation of HTML and JavaScript? Is this even real code?</strong></p>\n\n<p>Let&#8217;s take a look at what JSX actually is, how it works, and why the heck we&#8217;d want to be mixing HTML and JS in the first place!</p>\n<h2 id=\"whatisjsx\">What is JSX?</h2>\n<p>Defined by the React Docs as an &#8220;extension to JavaScript&#8221; or “syntax sugar for calling <code>React.createElement(component, props, ...children))</code>”, JSX is what makes writing your React Components easy.</p>\n<p>JSX is considered a <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">domain-specific language (DSL)</a>, which can look very similar to a template language, such as Mustache, Thymeleaf, Razor, Twig, or others.</p>\n<p>It doesn&#8217;t render out to HTML directly, but instead renders to React Classes that are consumed by the Virtual DOM. Eventually, through the mysterious magic of the Virtual DOM, it will make its way to the page and be rendered out to HTML.</p>\n<h2 id=\"howdoesitwork\">How Does it Work?</h2>\n<p>JSX is basically still just JavaScript with some extra functionality. With JSX, you can write code that looks very similar to HTML or XML, but you have the power of seamlessly mixing JavaScript methods and variables into your code. JSX is interpreted by a transpiler, such as <a href=\"https://babeljs.io/\">Babel</a>, and rendered to JavaScript code that the UI Framework (React, in this case) can understand.</p>\n<p>Don&#8217;t like JSX? That&#8217;s cool. It&#8217;s technically not required, and the React Docs actually include a section on using “<a href=\"https://facebook.github.io/react/docs/react-without-jsx.html\">React Without JSX</a>”. Let me warn you right now, though, it&#8217;s not pretty. Don&#8217;t believe me? Take a look.</p>\n<p><strong>JSX:</strong></p>\n<pre><code class=\"jsx language-jsx\">class SitePoint extends Component {\r\n  render() {\r\n    return (\r\n      &lt;div&gt;My name is &lt;span&gt;{this.props.myName}&lt;/span&gt;&lt;/div&gt;\r\n    )\r\n  }\r\n}\r\n</code></pre>\n<p><strong>React Sans JSX:</strong></p>\n<pre><code class=\"jsx language-jsx\">class SitePoint extends Component {\r\n  render() {\r\n    return React.createElement(\r\n      \"div\",\r\n      null,\r\n      \"My name is\",\r\n      React.createElement(\r\n        \"span\",\r\n        null,\r\n        this.props.myName\r\n      )\r\n    )\r\n  }\r\n}\r\n</code></pre>\n<p>Sure, looking at those small example pieces of code on that page you might be thinking, &#8220;Oh, that&#8217;s not so bad, I could do that.&#8221; But could you imagine writing an entire application like that?</p>\n<p>The example is just two simple nested HTML elements, nothing fancy. Basically, just a nested <code>Hello World</code>. Trying to write your React application without JSX would be extremely time consuming and, if you&#8217;re like most of us other developers out here working as characters in DevLand™, it will very likely quickly turn into a convoluted spaghetti code mess. Yuck!</p>\n<p>Using frameworks and libraries and things like that are meant to make our lives easier, not harder. I&#8217;m sure we&#8217;ve all seen the overuse and abuse of libraries or frameworks in our careers, but using JSX with your React is definitely not one of those cases.</p>\n<h2 id=\"whataboutseparationofconcerns\">What About Separation of Concerns?</h2>\n<p>Now, for those of us who learned to not mix our HTML with our JS &#8212; how bad it was, and how if we did, our applications would be haunted by the Bug Gods of the Apocalypse &#8212; mixing your HTML inside of your JavaScript probably seems like all kinds of wrong. After all, you have to maintain a Separation of Concerns at all costs! The world depends on it!</p>\n<p>I know, I was there, <strong>I was you</strong>.</p>\n<p>But, as weird as it may seem, it&#8217;s really <em>not that bad</em>, and your concerns are still separated. As someone who&#8217;s been working with React for long enough to be very comfortable with it, using small pieces of HTML/XML inside your JavaScript codebase is really kinda … magical. It takes the management of HTML out of the equation, and leaves you with nice, solid code. Just code. It helps to ease the pain of trying to use a markup language &#8212; which was designed for building word documents &#8212; for building applications, and brings it back to the control of the application&#8217;s code.</p>\n<p>Another issue of not separating out your JavaScript from your HTML: what if your JS fails to download or run, and the user is only left with HTML/CSS to render? If you&#8217;re building your application the React way, then your HTML (and maybe even your CSS if you&#8217;re using WebPack), is bundled in with your JavaScript itself. So the user really only has one small HTML file to download, then a large JavaScript payload that contains everything else.</p>\n<p>Worrying about search engines and SEO is unfortunately still a legitimate concern. We all know that the major search engines now render JavaScript, but initial rendering with JavaScript can still be slower, which could have an effect on your overall ranking. To mitigate this, it&#8217;s possible to do an initial render of your React on the server before sending it to the client. This will not only allow search engines to pull your site quicker, but also provide your users with a quicker <a href=\"https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint\">First Meaningful Paint</a>.</p>\n<p>Doing this can become complicated quickly, but at the time of this writing, SitePoint itself actually uses this method. Brad Denver did a fantastic write-up of how it was done here: “<a href=\"https://www.sitepoint.com/universal-react-rendering-sitepoint/\">Universal Rendering: How We Rebuilt SitePoint</a>”.</p>\n<p>Rendering server-side is still only going to help with failed loads (which are uncommon) or slow load times (much more common). It won&#8217;t help with users who completely disable JavaScript. Sorry, but a React app is still a JavaScript-based application. You can do a lot behind the scenes, but once you start mixing in app functionality and state management (e.g. Flux, Redux, or MobX), your time investment vs potential payoff starts going negative.</p>\n<h2 id=\"notjustforreact\">Not Just for React</h2>\n<p>JSX with React is pretty great stuff. But what if you&#8217;re using another framework or library, but still want to use it? Well, you&#8217;re in luck &#8212; because JSX technically isn&#8217;t tied to React. It&#8217;s still just DSL or &#8220;syntax sugar&#8221;, remember? Vue.js actually supports JSX <a href=\"https://vuejs.org/v2/guide/render-function.html\">out of the box</a>, and there have been attempts to use it with other frameworks such as Angular 2 and Ember.</p>\n<p>I hope this JSX quick introduction helped to give you a better understanding of just what JSX is, how it can help you, and how it can be used to create your applications. Now get back out there and make some cool stuff!</p>\n\n    <h3 class='f-c-grey-400'>Recommended Courses</h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1501203893wesbos.jpg' />\n        </div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https://ReactForBeginners.com/friend/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners</span></a></div>\n            <div class='f-large'>Wes Bos</div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'</strong> at checkout to get <strong>25% off</strong>.</div>\n          </div>\n        </div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https://ReactForBeginners.com/friend/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'></div>\n            </div>\n          </a>\n        </div>\n      </div>\n    \n  \n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p><strong>When React was first introduced, one of the features that caught most people&#8217;s attention (and drew the most criticism) was JSX. If you&#8217;re learning React, or have ever seen any code examples, you probably did a double-take at the syntax. What is this strange amalgamation of HTML and JavaScript? Is this even real code?</strong></p>\n<p>Let&#8217;s take a look at what JSX actually is, how it works, and why the heck we&#8217;d want to be mixing HTML and JS in the first place!</p>\n<h2 id=\"whatisjsx\">What is JSX?</h2>\n<p>Defined by the React Docs as an &#8220;extension to JavaScript&#8221; or “syntax sugar for calling <code>React.createElement(component, props, ...children))</code>”, JSX is what makes writing your React Components easy.</p>\n<p>JSX is considered a <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">domain-specific language (DSL)</a>, which can look very similar to a template language, such as Mustache, Thymeleaf, Razor, Twig, or others.</p>\n<p>It doesn&#8217;t render out to HTML directly, but instead renders to React Classes that are consumed by the Virtual DOM. Eventually, through the mysterious magic of the Virtual DOM, it will make its way to the page and be rendered out to HTML.</p>\n<h2 id=\"howdoesitwork\">How Does it Work?</h2>\n<p>JSX is basically still just JavaScript with some extra functionality. With JSX, you can write code that looks very similar to HTML or XML, but you have the power of seamlessly mixing JavaScript methods and variables into your code. JSX is interpreted by a transpiler, such as <a href=\"https://babeljs.io/\">Babel</a>, and rendered to JavaScript code that the UI Framework (React, in this case) can understand.</p>\n<p>Don&#8217;t like JSX? That&#8217;s cool. It&#8217;s technically not required, and the React Docs actually include a section on using “<a href=\"https://facebook.github.io/react/docs/react-without-jsx.html\">React Without JSX</a>”. Let me warn you right now, though, it&#8217;s not pretty. Don&#8217;t believe me? Take a look.</p>\n<p><strong>JSX:</strong></p>\n<pre><code class=\"jsx language-jsx\">class SitePoint extends Component {\r\n  render() {\r\n    return (\r\n      &lt;div&gt;My name is &lt;span&gt;{this.props.myName}&lt;/span&gt;&lt;/div&gt;\r\n    )\r\n  }\r\n}\r\n</code></pre>\n<p><strong>React Sans JSX:</strong></p>\n<pre><code class=\"jsx language-jsx\">class SitePoint extends Component {\r\n  render() {\r\n    return React.createElement(\r\n      \"div\",\r\n      null,\r\n      \"My name is\",\r\n      React.createElement(\r\n        \"span\",\r\n        null,\r\n        this.props.myName\r\n      )\r\n    )\r\n  }\r\n}\r\n</code></pre>\n<p>Sure, looking at those small example pieces of code on that page you might be thinking, &#8220;Oh, that&#8217;s not so bad, I could do that.&#8221; But could you imagine writing an entire application like that?</p>\n<p>The example is just two simple nested HTML elements, nothing fancy. Basically, just a nested <code>Hello World</code>. Trying to write your React application without JSX would be extremely time consuming and, if you&#8217;re like most of us other developers out here working as characters in DevLand™, it will very likely quickly turn into a convoluted spaghetti code mess. Yuck!</p>\n<p>Using frameworks and libraries and things like that are meant to make our lives easier, not harder. I&#8217;m sure we&#8217;ve all seen the overuse and abuse of libraries or frameworks in our careers, but using JSX with your React is definitely not one of those cases.</p>\n",
    "protected": false
    },
    "author": 72108,
    "featured_media": 160396,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407
    ],
    "tags": [
    6874,
    9543,
    7829,
    9802
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160395"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/72108"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160395"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160395/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160396"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160395"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160395"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160395"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160355,
    "date": "2017-09-29T10:00:45",
    "date_gmt": "2017-09-29T17:00:45",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160355"
    },
    "modified": "2017-09-29T09:32:08",
    "modified_gmt": "2017-09-29T16:32:08",
    "slug": "using-preact-react-alternative",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/using-preact-react-alternative/",
    "title": {
    "rendered": "Using Preact as a React Alternative"
    },
    "content": {
    "rendered": "<p><em>For a high-quality, in-depth introduction to React, you can’t go past Canadian full-stack developer Wes Bos. <a href=\"https://ReactForBeginners.com/friend/SITEPOINT\">Try his course here</a>, and use the code<strong> SITEPOINT</strong> to get <strong>25% off </strong>and to help support SitePoint.</em></p>\n<p><strong><a href=\"https://github.com/developit/preact\">Preact</a> is an implementation of the virtual DOM component paradigm just like React and many other similar libraries. Unlike React, it&#8217;s only 3KB in size, and it also outperforms it in terms of speed. It&#8217;s created by Jason Miller and available under the well-known permissive and open-source MIT license.</strong></p>\n<h2 id=\"whyusepreact\">Why Use Preact?</h2>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506700565preact-logo.jpg\" alt=\"Preact logo\" width=\"200\" height=\"\" class=\"alignright size-full wp-image-160357\" />Preact is a lightweight version of React. You may prefer to use Preact as a lightweight alternative if you like building views with React but performance, speed and size are a priority for you &#8212; for example, in the case of mobile web apps or progressive web apps.</p>\n\n<p>Whether you&#8217;re starting a new project or developing an existing one, Preact can save you a lot of time. You don&#8217;t need to reinvent the wheel trying to learn a new library, since it&#8217;s similar to, and compatible with, React &#8212; to the point that you can use existing React packages with it with only some aliasing, thanks to the compatibility layer <code>preact-compat</code>.</p>\n<h2 id=\"prosandcons\">Pros and Cons</h2>\n<p>There are many differences between React and Preact that we can summarize in three points:</p>\n<ul>\n<li><strong>Features and API</strong>: Preact includes only a subset of the React API, and not all available features in React.</li>\n<li><strong>Size</strong>: Preact is much smaller than React.</li>\n<li><strong>Performance</strong>: Preact is faster than React.</li>\n</ul>\n<p>Every library out there has its own set of pros and cons, and only your priorities can help you decide which library is a good fit for your next project. In this section, I&#8217;ll try to list the pros and cons of the two libraries.</p>\n<h3 id=\"preactpros\">Preact Pros</h3>\n<ul>\n<li>Preact is lightweight, smaller (only 3KB in size when gzipped) and faster than React (see these <a href=\"https://developit.github.io/preact-perf/\">tests</a>). You can also run performance tests in your browser via <a href=\"https://developit.github.io/preact-perf/\">this link</a>.</li>\n<li>Preact is largely compatible with React, and has the same ES6 API as React, which makes it dead easy either to adopt Preact as a new library for building user interfaces in your project or to swap React with Preact for an existing project for performance reasons.</li>\n<li>It has good documentation and examples available from the official website.</li>\n<li>It has a powerful and official CLI for quickly creating new Preact projects, without the hassle of Webpack and Babel configuration.</li>\n<li>Many features are inspired by all the work already done on React.</li>\n<li>It has also its own set of advanced features independent from React, like <a href=\"https://preactjs.com/guide/linked-state\">Linked State</a>.</li>\n</ul>\n<h3 id=\"reactpros\">React Pros</h3>\n<ul>\n<li>React supports one-way data binding.</li>\n<li>It&#8217;s backed by a large company, Facebook.</li>\n<li>Good documentation, examples, and tutorials on the official website and the web.</li>\n<li>Large community.</li>\n<li>Used on Facebook&#8217;s website, which has millions of visitors worldwide.</li>\n<li>Has its own official developer debugging tools extension for Chrome.</li>\n<li>It has the Create React App project boilerplate for quickly creating projects with zero configuration.</li>\n<li>It has a well-architectured and complex codebase.</li>\n</ul>\n<h3 id=\"reactcons\">React Cons</h3>\n<ul>\n<li>React has a relatively large size in comparison with Preact or other existing similar libraries. (React minified source file is around 136KB in size, or about 42KB when minified and gzipped.)</li>\n<li>It&#8217;s slower than Preact.</li>\n<li>As a result of its complex codebase, it&#8217;s harder for novice developers to contribute.</li>\n</ul>\n<p><em>Note: Another con I listed while writing this article was that React had a grant patent clause paired with the BSD license, making it legally unsuitable for some use cases. However, <a href=\"https://github.com/facebook/react/commit/b765fb25ebc6e53bb8de2496d2828d9d01c2774b\">in September 2017</a>, the React license switched MIT, which resolved these license concerns.</em></p>\n<h3 id=\"preactcons\">Preact Cons</h3>\n<ul>\n<li>Preact supports only stateless functional components and ES6 class-based component definition, so there&#8217;s no <strong>createClass</strong>.</li>\n<li>No support for <a href=\"https://facebook.github.io/react/docs/context.html\">context</a>.</li>\n<li>No support for React propTypes.</li>\n<li>Smaller community than React.</li>\n</ul>\n<h2 id=\"gettingstartedwithpreactcli\">Getting Started with Preact CLI</h2>\n<p>Preact CLI is a command line tool created by Preact&#8217;s author, Jason Miller. It makes it very easy to create a new Preact project without getting bogged down with configuration complexities, so let&#8217;s start by installing it.</p>\n<p>Open your terminal (Linux or macOS) or command prompt (Windows), then run the following commands:</p>\n<pre><code class=\"bash language-bash\">npm i -g preact-cli@latest\r\n</code></pre>\n<p>This will install the latest version of Preact CLI, assuming you have <a href=\"https://www.sitepoint.com/beginners-guide-node-package-manager/\">Node and NPM installed</a> on your local development machine.</p>\n<p>You can now create your project with this:</p>\n<pre><code class=\"bash language-bash\">preact create my-app\r\n</code></pre>\n<p>Or with this, ff you want to create your app interactively:</p>\n<pre><code class=\"bash language-bash\">preact init\r\n</code></pre>\n<p>Next, navigate inside your app&#8217;s root folder and run this:</p>\n<pre><code class=\"bash language-bash\">npm start\r\n</code></pre>\n<p>This will start a live-reload development server.</p>\n<p>Finally, when you finish developing your app, you can build a production release using this:</p>\n<pre><code class=\"bash language-bash\">npm run build\r\n</code></pre>\n<h2 id=\"demystifyingyourfirstpreactapp\">Demystifying Your First Preact App</h2>\n<p>After successfully installing the Preact CLI and generating an app, let&#8217;s try to understand the simple app generated with the Preact CLI.</p>\n<p>The Preact CLI generates the following directory structure</p>\n<pre><code class=\"bash language-bash\">├── node_modules\r\n├── package.json\r\n├── package-lock.json\r\n└── src\r\n    ├── assets\r\n    ├── components\r\n    │   ├── app.js\r\n    │   └── header\r\n    ├── index.js\r\n    ├── lib\r\n    ├── manifest.json\r\n    ├── routes\r\n    │   ├── home\r\n    │   └── profile\r\n    └── style\r\n        └── index.css\r\n</code></pre>\n<p>The <code>components</code> folder holds Preact components, and the <code>routes</code> folder holds the page components used for each app&#8217;s route. You can use the <code>lib</code> folder for any external libraries, the <code>style</code> folder for CSS styles, and the <code>assets</code> for icons and other graphics.</p>\n<p>Note the <code>manifest.json</code> file, which is like <code>package.json</code> but for PWAs (progressive web apps). Thanks to the Preact CLI, you can have a perfect-score PWA out of the box.</p>\n<p>Now, if you open your project&#8217;s <code>package.json</code> file, you&#8217;ll see that the main entry point is set to <code>src/index.js</code>. Here is the content of this file:</p>\n<pre><code class=\"jsx language-jsx\">import './style';\r\nimport App from './components/app';\r\n\r\nexport default App;\r\n</code></pre>\n<p>As you can see, <code>index.js</code> imports styles, and <code>App</code> component from <code>./components/app**</code>, and then just exports it as the default.</p>\n<p>Now, let&#8217;s see what&#8217;s inside <code>./components/app</code>:</p>\n<pre><code class=\"jsx language-jsx\">import { h, Component } from 'preact';\r\nimport { Router } from 'preact-router';\r\n\r\nimport Header from './header';\r\nimport Home from '../routes/home';\r\nimport Profile from '../routes/profile';\r\n\r\nexport default class App extends Component {\r\n    handleRoute = e =&gt; {\r\n        this.currentUrl = e.url;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            &lt;div id=\"app\"&gt;\r\n                &lt;Header /&gt;\r\n                &lt;Router onChange={this.handleRoute}&gt;\r\n                    &lt;Home path=\"/\" /&gt;\r\n                    &lt;Profile path=\"/profile/\" user=\"me\" /&gt;\r\n                    &lt;Profile path=\"/profile/:user\" /&gt;\r\n                &lt;/Router&gt;\r\n            &lt;/div&gt;\r\n        );\r\n    }\r\n}\r\n</code></pre>\n<p>This file exports a default class <code>App</code> which extends the <code>Component</code> class imported from the <code>preact</code> package. Every Preact component needs to extend the <code>Component</code> class.</p>\n<p><code>App</code> defines a <code>render</code> method, which returns a bunch of HTML elements and Preact components that render the app&#8217;s main user interface.  </p>\n<p>Inside the <code>div</code> element, we have two Preact components, <code>Header</code> &#8212; which renders the app&#8217;s header &#8212; and a <code>Router</code> component.</p>\n<p>The Preact Router is similar to the latest version of <a href=\"https://www.sitepoint.com/react-router-v4-complete-guide/\">React Router (version 4)</a>. You simply need to wrap the child components with a <code>&lt;Router&gt;</code> component, then specify the <code>path</code> prop for each component. Then, the router will take care of rendering the component, which has a path prop that matches the current browser&#8217;s URL.</p>\n<p>It&#8217;s worth mentioning that Preact Router is very simple and, unlike React Router, it doesn&#8217;t support advanced features such as nested routes and view composition. If you need these features, you have to use either the React Router v3 by aliasing <code>preact-compat</code>, or better yet use the latest React Router (version 4) which is more powerful than v3 and doesn&#8217;t need any compatibility layer, because it works directly with Preact. (See this <a href=\"https://codepen.io/developit/pen/BWxepY?editors=0010\">CodePen</a> demo for an example.)  </p>\n<h2 id=\"preactcompatibilitylayer\">Preact Compatibility Layer</h2>\n<p>The <code>preact-compat</code> module allows developers to switch from React to Preact without changing imports from React and ReactDOM to Preact, or to use existing React packages with Preact.</p>\n<p>Using <code>preact-compat</code> is easy. All you have to do is to first install it via npm:</p>\n<pre><code class=\"bash language-bash\">npm i -S preact preact-compat\r\n</code></pre>\n<p>Then set up your build system to redirect imports or requires for <code>react</code> or <code>react-dom</code> to <code>preact-compat</code>. For example, in the case of Webpack, you just need to add the following configuration to <code>webpack.config.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"resolve\": {\r\n    \"alias\": {\r\n      \"react\": \"preact-compat\",\r\n      \"react-dom\": \"preact-compat\"\r\n    }\r\n  }\r\n}\r\n</code></pre>\n\n    <h3 class='f-c-grey-400'>Recommended Courses</h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1501203893wesbos.jpg' />\n        </div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https://ReactForBeginners.com/friend/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners</span></a></div>\n            <div class='f-large'>Wes Bos</div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'</strong> at checkout to get <strong>25% off</strong>.</div>\n          </div>\n        </div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https://ReactForBeginners.com/friend/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'></div>\n            </div>\n          </a>\n        </div>\n      </div>\n    \n  \n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Preact is a nice alternative to React. Its community is growing steadily, and more web apps are using it. So if you&#8217;re building a web app with high-performance requirements, or a mobile app for slow 2G networks, then you should consider Preact &#8212; either as the first candidate view library for your project, or as a drop-in replacement for React.</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p><strong><a href=\"https://github.com/developit/preact\">Preact</a> is an implementation of the virtual DOM component paradigm just like React and many other similar libraries. Unlike React, it&#8217;s only 3KB in size, and it also outperforms it in terms of speed. It&#8217;s created by Jason Miller and available under the well-known permissive and open-source MIT license.</strong></p>\n<h2 id=\"whyusepreact\">Why Use Preact?</h2>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506700565preact-logo.jpg\" alt=\"Preact logo\" width=\"200\" height=\"\" class=\"alignright size-full wp-image-160357\" />Preact is a lightweight version of React. You may prefer to use Preact as a lightweight alternative if you like building views with React but performance, speed and size are a priority for you &#8212; for example, in case of mobile web apps or progressive web apps.</p>\n<p>Whether you&#8217;re starting a new project or developing an existing one, Preact can save you a lot of time. You don&#8217;t need to reinvent the wheel trying to learn a new library, since it&#8217;s similar to, and compatible with, React &#8212; to the point that you can use existing React packages with it with only some aliasing, thanks to the compatibility layer <code>preact-compat</code>.</p>\n<h2 id=\"prosandcons\">Pros and Cons</h2>\n<p>There are many differences between React and Preact that we can summarize in three points:</p>\n<ul>\n<li><strong>Features and API</strong>: Preact includes only a subset of the React API, and not all available features in React.</li>\n<li><strong>Size</strong>: Preact is much smaller than React.</li>\n<li><strong>Performance</strong>: Preact is faster than React.</li>\n</ul>\n<p>Every library out there has its own set of pros and cons, and only your priorities can help you decide which library is a good fit for your next project. In this section, I&#8217;ll try to list the pros and cons of the two libraries.</p>\n<h3 id=\"preactpros\">Preact Pros</h3>\n<ul>\n<li>Preact is lightweight, smaller (only 3KB in size when gzipped) and faster than React (see these <a href=\"https://developit.github.io/preact-perf/\">tests</a>). You can also run performance tests in your browser via <a href=\"https://developit.github.io/preact-perf/\">this link</a>.</li>\n<li>Preact is largely compatible with React, and has the same ES6 API as React, which makes it dead easy either to adopt Preact as a new library for building user interfaces in your project or to swap React with Preact for an existing project for performance reasons.</li>\n<li>It has good documentation and examples available from the official website.</li>\n<li>It has a powerful and official CLI for quickly creating new Preact projects, without the hassle of Webpack and Babel configuration.</li>\n<li>Many features are inspired by all the work already done on React.</li>\n<li>It has also its own set of advanced features independent from React, like <a href=\"https://preactjs.com/guide/linked-state\">Linked State</a>.</li>\n</ul>\n<h3 id=\"reactpros\">React Pros</h3>\n<ul>\n<li>React supports one-way data binding.</li>\n<li>It&#8217;s backed by a large company, Facebook.</li>\n<li>Good documentation, examples, and tutorials on the official website and the web.</li>\n<li>Large community.</li>\n<li>Used on Facebook&#8217;s website, which has millions of visitors worldwide.</li>\n<li>Has its own official developer debugging tools extension for Chrome.</li>\n<li>It has the Create React App project boilerplate for quickly creating projects with zero configuration.</li>\n<li>It has a well-architectured and complex codebase.</li>\n</ul>\n<h3 id=\"reactcons\">React Cons</h3>\n<ul>\n<li>React has a relatively large size in comparison with Preact or other existing similar libraries. (React minified source file is around 136KB in size, or about 42KB when minified and gzipped.)</li>\n<li>It&#8217;s slower than Preact.</li>\n<li>As a result of its complex codebase, it&#8217;s harder for novice developers to contribute.</li>\n</ul>\n<p><em>Note: Another con I listed while writing this article was that React had a grant patent clause paired with the BSD license, making it legally unsuitable for some use cases. However, <a href=\"https://github.com/facebook/react/commit/b765fb25ebc6e53bb8de2496d2828d9d01c2774b\">in September 2017</a>, the React license switched MIT, which resolved these license concerns.</em></p>\n<h3 id=\"preactcons\">Preact Cons</h3>\n<ul>\n<li>Preact supports only stateless functional components and ES6 class-based component definition, so there&#8217;s no <strong>createClass</strong>.</li>\n<li>No support for <a href=\"https://facebook.github.io/react/docs/context.html\">context</a>.</li>\n<li>No support for React propTypes.</li>\n<li>Smaller community than React.</li>\n</ul>\n<h2 id=\"gettingstartedwithpreactcli\">Getting Started with Preact CLI</h2>\n<p>Preact CLI is a command line tool created by Preact&#8217;s author, Jason Miller. It makes it very easy to create a new Preact project without getting bogged down with configuration complexities, so let&#8217;s start by installing it.</p>\n<p>Open your terminal (Linux or macOS) or command prompt (Windows), then run the following commands:</p>\n<pre><code class=\"bash language-bash\">npm i -g preact-cli@latest\r\n</code></pre>\n<p>This will install the latest version of Preact CLI, assuming you have <a href=\"https://www.sitepoint.com/beginners-guide-node-package-manager/\">Node and NPM installed</a> on your local development machine.</p>\n<p>You can now create your project with this:</p>\n<pre><code class=\"bash language-bash\">preact create my-app\r\n</code></pre>\n<p>Or with this, ff you want to create your app interactively:</p>\n<pre><code class=\"bash language-bash\">preact init\r\n</code></pre>\n<p>Next, navigate inside your app&#8217;s root folder and run this:</p>\n<pre><code class=\"bash language-bash\">npm start\r\n</code></pre>\n<p>This will start a live-reload development server.</p>\n<p>Finally, when you finish developing your app, you can build a production release using this:</p>\n<pre><code class=\"bash language-bash\">npm run build\r\n</code></pre>\n",
    "protected": false
    },
    "author": 72594,
    "featured_media": 160356,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407
    ],
    "tags": [
    9543,
    10040,
    7829,
    9802
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160355"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/72594"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160355"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160355/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160356"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160355"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160355"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160355"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160340,
    "date": "2017-09-29T08:00:39",
    "date_gmt": "2017-09-29T15:00:39",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160340"
    },
    "modified": "2017-09-29T01:04:10",
    "modified_gmt": "2017-09-29T08:04:10",
    "slug": "extracting-website-data-creating-apis-wrapapi",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/extracting-website-data-creating-apis-wrapapi/",
    "title": {
    "rendered": "Extracting Website Data and Creating APIs with WrapAPI"
    },
    "content": {
    "rendered": "<p><strong>Today, almost all services we use have some sort of API. Some web applications are even built from API points alone, being passed to some kind of front-end view. If you&#8217;re a consumer of a service that provides an API, you&#8217;ll sometimes need more features or find limits to what the API can offer. In this article, we&#8217;ll cover a service that&#8217;s useful both for API consumers and creators.</strong></p>\n\n<p>I always go with the saying that, if there&#8217;s a web interface, you can build your own API over it. <a href=\"https://wrapapi.com/\">WrapAPI</a> tries to make this process easier. If you&#8217;re familiar with the process of web scraping/crawling (or extracting data from websites), you&#8217;ll see the magic of WrapAPI.</p>\n<p>WrapAPI offers a service that allows you to easily extract information from websites and create APIs from the data. It provides an easy, interactive way of selecting what information you want to get. With just a few clicks, you can have your API online.</p>\n<p>To follow along with this tutorial, I recommend you head over to <a href=\"https://wrapapi.com/\">wrapapi.com</a> and create an account.</p>\n<h2 id=\"howtogetaroundwrapapi\">How To Get Around WrapAPI</h2>\n<p>On the WrapAPI site, you&#8217;ll see that you can start to build your project right away &#8212; although, unless you create an account, your work won&#8217;t be saved.</p>\n<p>Once you&#8217;ve signed up, click the <strong>Try building an API</strong> button.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635845WrapAPI-Editor.png\" alt=\"WrapAPI Web Builder\" /></p>\n<p>You&#8217;ll be presented by a browser-like interface. On top of the site we&#8217;re presented with a URL bar. As an example, WrapAPI uses Hacker News (<code>https://news.ycombinator.com/</code>). If you click the URL to change it to something else, you&#8217;ll see more options related to the request you want to make. We&#8217;ll use the default options, and only change the URL to <code>https://www.sitepoint.com/javascript/</code>. We&#8217;re covering only the <strong>GET</strong> method, as we only want to get data in this example.</p>\n<p>Below the URL bar there are four buttons that give you different information regarding the site you&#8217;re viewing. <strong>Browser view</strong> displays the site as you would visit it from your browser. <strong>Code view</strong> displays the source code of the site. <strong>Headers</strong> shows the response you get from the server. This is useful if you want to see what response you get from the server: it gives you information like the HTTP status codes (200, 404, 400 etc.), content types, web servers and so on. You can also view the request&#8217;s <strong>Cookies</strong> directly from the builder.</p>\n<h2 id=\"gettingthedata\">Getting the Data</h2>\n<p>By now you should be able to see SitePoint inside the <strong>Browser View</strong> frame.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635853wrapapi-sitepoint.png\" alt=\"Preview of SitePoint inside WrapAPI Builder\" /></p>\n<p>Let&#8217;s create a very simple API that shows us the latest post titles of the JavaScript channel. If you hover over the titles, images or any other element in the site, you&#8217;ll notice a selection color covering it. Let&#8217;s scroll down a bit, to the <strong>LATEST</strong> articles part. Hover over the title from one of the articles and click on that title. You&#8217;ll notice that it doesn&#8217;t switch to that particular link we clicked. We see that every title in this section is highlighted. WrapAPI guessed that these are all the titles we want. Sometimes it can also select parts of the sites we don&#8217;t want. That&#8217;s usually the case when the CSS class selectors are not well-defined or used by other elements in the site.</p>\n<p>Besides CSS selectors, WrapAPI supports regular expressions, JSON selectors, headers, cookies, form outputs, and a bunch more options. You can use them all together and extract exactly what you&#8217;re aiming for. In this example, we&#8217;ll only use CSS selectors.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635850wrapapi-selector.png\" alt=\"Selecting titles in the builder\" /></p>\n<p>In the right part of the interface, you&#8217;ll see three tabs. Let&#8217;s take a look at the current <strong>Build</strong> tab. <strong>Outputs</strong> will show us the selectors (in our case CSS selectors), and you&#8217;ll get more details on what you would like to select. We&#8217;re interested only in extracting the title, which is text. There are more options on cleaning the result output, but we won&#8217;t get into these details. If you&#8217;d like to create another selector, to select description, author, date, etc., just click the  <strong>Create a new collection/output</strong>. Naming your selectors is also important, as this will make it easier if you use multiple selectors in the site. By clicking the pencil icon, you can edit your selectors.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635848wrapapi-output.png\" alt=\"Extract/Ouput options\" /></p>\n<p>The <strong>Preview</strong> tab will show a representation of our data in JSON, and you probably get the idea of what the API will look like. If you&#8217;re happy with the results, you can click the <strong>Save</strong> button to save a version of the API.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635838save-api.png\" alt=\"Saving API endpoints\" /></p>\n<p>You&#8217;ll need to enter the repository and the endpoint name of the API. It helps you manage and organize your APIs. That will also be part of your API&#8217;s name in the end. After entering the information, you&#8217;ll return to the builder. Our API is saved, but now we need to test and publish it.</p>\n<p><strong>Tips</strong>:</p>\n<ul>\n<li>If the site has pagination (previous/next pages), you can use the query string options. (More on that <a href=\"https://wrapapi.com/#/docs/Inputs\">here</a>.)</li>\n<li>Name your selectors correctly, as they&#8217;ll be part of the JSON output.</li>\n</ul>\n<h3 id=\"thewrapapichromeextension\">The WrapAPI Chrome extension</h3>\n<p>The WrapAPI chrome extension is another means for creating APIs. It lets you capture requests you&#8217;ve made with Chrome. Useful for sites that use JavaScript (Ajax) to call data, it&#8217;s also great for sites that are behind logins. You can install it from the Chrome web <a href=\"https://chrome.google.com/webstore/detail/wrapapi/fmnddkfmloenccahfiaflnkpngndkafm\">store</a>.</p>\n<p>This time, let&#8217;s use Hacker News. Visit the site you want to get data from, and then follow these steps:</p>\n<ol>\n<li>\n<p>Open the Chrome DevTools, and navigate to WrapAPI tab on the very right tab.</p>\n</li>\n<li>\n<p>Undock it into a separate window.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635840undock-chrome-devtools.png\" alt=\"Undocking the Chrome extension from DevTools\" /></p>\n</li>\n<li>\n<p>Log in with your WrapAPI credentials.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635842wrapapi-chrome.png\" alt=\"WrapAPI Chrome extension\" /></p>\n</li>\n<li>\n<p>Whenever you&#8217;re ready, press the <strong>Start capturing requests</strong> button.</p>\n</li>\n<li>\n<p>Refresh the main tab you where using.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506672005dev-tools-wrapapi.jpg\" alt=\"WrapAPI extension in Developer Tools\" width=\"995\" height=\"294\" class=\"aligncenter size-full wp-image-160344\" /></p>\n<ol>\n<li>\n<p>Select the request you want to make into an API (using <code>GET</code>).</p>\n</li>\n<li>\n<p>Click on <strong>Save to API endpoint</strong> and save it into a repository.</p>\n</li>\n<li>\n<p>Finally, click the link: <strong>Click here to use it to define this API endpoint&#8217;s inputs and outputs…</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<p>You&#8217;ll be redirected to the builder, in order to extract the data. The benefit of using this method is that you can bypass login pages and use your already assigned cookies.</p>\n<h2 id=\"publishingtheapi\">Publishing the API</h2>\n<p>Before publishing our API, we have to freeze it. Selecting a release number such as 0.0.1 works fine. Note that any changes you make to the API, you&#8217;ll have to freeze it as a new version, by also increasing the version number. Provide a simple description of what your API is about, or if it&#8217;s an update, what changes it contains. Finally, press <strong>Publish</strong>.</p>\n<p>The last step before publishing is to generate a key. Click <strong>Generate an API key</strong>.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635836ready.png\" alt=\"Ready to publish our API\" /></p>\n<p>All green? that must mean we&#8217;ve successfully completed the steps required to publish our API, and that&#8217;s almost right. The last step is to click the <strong>Publish</strong> button at the top, after the URL bar. You can already see the different programming languages you can use to test the API. I&#8217;ll use my browser with an extension for presenting JSON in a better way.</p>\n<p>And here is our final API:</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635832final.png\" alt=\"Visiting the created API\" /></p>\n\n    <h3 class='f-c-grey-400'>Recommended Courses</h3>\n    \n      <div class='l-d-f l-w-100 t-bg-white l-pa3 Affiliate-border l-mb4'>\n        <div class='Affiliate-image l-d-n l-d-b--2col l-mr3 l-as-cen l-fs0'>\n          <img src='https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1501203893wesbos.jpg' />\n        </div>\n        <div class='f-c-grey-400 l-d-f l-ai-cen'>\n          <div class='Affiliate-Box'>\n            <div class='f-larger'><a href='https://ReactForBeginners.com/friend/SITEPOINT'><span class='f-bold Affiliate-title'>The Best Way to Learn React for Beginners</span></a></div>\n            <div class='f-large'>Wes Bos</div>\n            <div>A step-by-step training course to get you building real world React.js + Firebase apps and website components in a couple of afternoons. Use coupon code <strong>'SITEPOINT'</strong> at checkout to get <strong>25% off</strong>.</div>\n          </div>\n        </div>\n        <div class='Affiliate-play l-ml3'>\n          <a href='https://ReactForBeginners.com/friend/SITEPOINT'>\n            <div class='circle t-t'>\n              <div class='playicon'></div>\n            </div>\n          </a>\n        </div>\n      </div>\n    \n  \n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Within a minute, we were able to create an API from a simple web interface.</p>\n<p>There are some things you should consider. Scraping/Extracting data from websites can sometimes have legal implications regarding the content found on the website. If you happen to use a website as a service for your API, consider asking for permission to use that content, especially when distributing it as an API.</p>\n<p>WrapAPI provides some really great and easy-to-use features, but they don&#8217;t come without a price. The free and community accounts come without any cost, but you can only create public APIs, and there&#8217;s a limit of <strong>30,000</strong> API calls per month. There are a couple of <a href=\"https://wrapapi.com/#/pricing\">pricing plans</a>. You can always create your own APIs and scrapers, but if you lack the skills, or don&#8217;t have time, then maybe WrapAPI is something you might want to try.</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p><strong>Today, almost all services we use have some sort of API. Some web applications are even built from API points alone, being passed to some kind of front-end view. If you&#8217;re a consumer of a service that provides an API, you&#8217;ll sometimes need more features or find limits to what the API can offer. In this article, we&#8217;ll cover a service that&#8217;s useful both for API consumers and creators.</strong></p>\n<p>I always go with the saying that, if there&#8217;s a web interface, you can build your own API over it. <a href=\"https://wrapapi.com/\">WrapAPI</a> tries to make this process easier. If you&#8217;re familiar with the process of web scraping/crawling (or extracting data from websites), you&#8217;ll see the magic of WrapAPI.</p>\n<p>WrapAPI offers a service that allows you to easily extract information from websites and create APIs from the data. It provides an easy, interactive way of selecting what information you want to get. With just a few clicks, you can have your API online.</p>\n<p>To follow along with this tutorial, I recommend you head over to <a href=\"https://wrapapi.com/\">wrapapi.com</a> and create an account.</p>\n<h2 id=\"howtogetaroundwrapapi\">How To Get Around WrapAPI</h2>\n<p>On the WrapAPI site, you&#8217;ll see that you can start to build your project right away &#8212; although, unless you create an account, your work won&#8217;t be saved.</p>\n<p>Once you&#8217;ve signed up, click the <strong>Try building an API</strong> button.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635845WrapAPI-Editor.png\" alt=\"WrapAPI Web Builder\" /></p>\n<p>You&#8217;ll be presented by a browser-like interface. On top of the site we&#8217;re presented with a URL bar. As an example, WrapAPI uses Hacker News (<code>https://news.ycombinator.com/</code>). If you click the URL to change it to something else, you&#8217;ll see more options related to the request you want to make. We&#8217;ll use the default options, and only change the URL to <code>https://www.sitepoint.com/javascript/</code>. We&#8217;re covering only the <strong>GET</strong> method, as we only want to get data in this example.</p>\n<p>Below the URL bar there are four buttons that give you different information regarding the site you&#8217;re viewing. <strong>Browser view</strong> displays the site as you would visit it from your browser. <strong>Code view</strong> displays the source code of the site. <strong>Headers</strong> shows the response you get from the server. This is useful if you want to see what response you get from the server: it gives you information like the HTTP status codes (200, 404, 400 etc.), content types, web servers and so on. You can also view the request&#8217;s <strong>Cookies</strong> directly from the builder.</p>\n<h2 id=\"gettingthedata\">Getting the Data</h2>\n<p>By now you should be able to see SitePoint inside the <strong>Browser View</strong> frame.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635853wrapapi-sitepoint.png\" alt=\"Preview of SitePoint inside WrapAPI Builder\" /></p>\n<p>Let&#8217;s create a very simple API that shows us the latest post titles of the JavaScript channel. If you hover over the titles, images or any other element in the site, you&#8217;ll notice a selection color covering it. Let&#8217;s scroll down a bit, to the <strong>LATEST</strong> articles part. Hover over the title from one of the articles and click on that title. You&#8217;ll notice that it doesn&#8217;t switch to that particular link we clicked. We see that every title in this section is highlighted. WrapAPI guessed that these are all the titles we want. Sometimes it can also select parts of the sites we don&#8217;t want. That&#8217;s usually the case when the CSS class selectors are not well-defined or used by other elements in the site.</p>\n<p>Besides CSS selectors, WrapAPI supports regular expressions, JSON selectors, headers, cookies, form outputs, and a bunch more options. You can use them all together and extract exactly what you&#8217;re aiming for. In this example, we&#8217;ll only use CSS selectors.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635850wrapapi-selector.png\" alt=\"Selecting titles in the builder\" /></p>\n<p>In the right part of the interface, you&#8217;ll see three tabs. Let&#8217;s take a look at the current <strong>Build</strong> tab. <strong>Outputs</strong> will show us the selectors (in our case CSS selectors), and you&#8217;ll get more details on what you would like to select. We&#8217;re interested only in extracting the title, which is text. There are more options on cleaning the result output, but we won&#8217;t get into these details. If you&#8217;d like to create another selector, to select description, author, date, etc., just click the  <strong>Create a new collection/output</strong>. Naming your selectors is also important, as this will make it easier if you use multiple selectors in the site. By clicking the pencil icon, you can edit your selectors.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635848wrapapi-output.png\" alt=\"Extract/Ouput options\" /></p>\n<p>The <strong>Preview</strong> tab will show a representation of our data in JSON, and you probably get the idea of what the API will look like. If you&#8217;re happy with the results, you can click the <strong>Save</strong> button to save a version of the API.</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1500635838save-api.png\" alt=\"Saving API endpoints\" /></p>\n<p>You&#8217;ll need to enter the repository and the endpoint name of the API. It helps you manage and organize your APIs. That will also be part of your API&#8217;s name in the end. After entering the information, you&#8217;ll return to the builder. Our API is saved, but now we need to test and publish it.</p>\n<p><strong>Tips</strong>:</p>\n<ul>\n<li>If the site has pagination (previous/next pages), you can use the query string options. (More on that <a href=\"https://wrapapi.com/#/docs/Inputs\">here</a>.)</li>\n<li>Name your selectors correctly, as they&#8217;ll be part of the JSON output.</li>\n</ul>\n",
    "protected": false
    },
    "author": 72247,
    "featured_media": 160341,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407
    ],
    "tags": [
    986,
    9543,
    7829,
    6040,
    11572
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160340"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/72247"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160340"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160340/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160341"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160340"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160340"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160340"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 160329,
    "date": "2017-09-28T08:00:43",
    "date_gmt": "2017-09-28T15:00:43",
    "guid": {
    "rendered": "https://www.sitepoint.com/?p=160329"
    },
    "modified": "2017-09-28T00:59:36",
    "modified_gmt": "2017-09-28T07:59:36",
    "slug": "conditionally-applying-css-class-vue-js",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/conditionally-applying-css-class-vue-js/",
    "title": {
    "rendered": "Conditionally Applying a CSS Class in Vue.js"
    },
    "content": {
    "rendered": "<p><strong>There are times you need to change an element&#8217;s CSS classes at runtime. But when changing classes, it&#8217;s sometimes best to apply style details conditionally. For example, imagine your view has a pager. Pagers are often used to navigate larger sets of items. When navigating, it can be helpful to show the user the page they&#8217;re currently on. The style of the item is conditionally set, based on the current page that&#8217;s being viewed.</strong></p>\n\n<p>A pager in this case may look something like this:</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1501161191pager.png\" alt=\"Pager\" /></p>\n<p>In this example, there are five pages. Only one of these pages is selected at a time. If you built this pager with Bootstrap, the selected page would have a CSS class named <code>active</code> applied. You&#8217;d want this class applied only if the page was the currently viewed page. In other words, you&#8217;d want to <em>conditionally</em> apply the <code>active</code> CSS class. As discussed in my <a href=\"https://www.ecofic.com/courses/vue-getting-started/\">Vue.js tutorial</a>, Vue provides a way to conditionally apply a CSS class to an element. I&#8217;m going to show you this technique in this article.</p>\n<p>To conditionally apply a CSS class at runtime, you can bind to a JavaScript object. To successfully complete this task, you must complete two steps. First, you must ensure that your CSS class is defined. Then, you create the class bindings in your template. I&#8217;m going to explain each of these steps in detail in the rest of this article.</p>\n<h2 id=\"step1defineyourcssclasses\">Step 1: Define Your CSS Classes</h2>\n<p>Imagine, for a moment, that the five page items shown in the image above were defined using the following HTML:</p>\n<pre><code class=\"markup language-markup\">&lt;div id=\"myApp\"&gt;\r\n  &lt;nav aria-label=\"Page navigation example\"&gt;\r\n    &lt;ul class=\"pagination\"&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;1&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;2&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item active\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;3&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;4&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;5&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/nav&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Notice that each page in this code snippet has a list item element (<code>&lt;li …</code>). That element references the <code>page-item</code> CSS class. In the code for this article, this class is defined in the Bootstrap CSS framework. However, if it weren&#8217;t defined there, it would be your responsibility to ensure that it was defined somewhere. The second CSS class is the one that&#8217;s most relevant to this article, though.</p>\n<p>The <code>active</code> CSS class is used to identify the currently selected page. For this article, this CSS class is also defined in the Bootstrap CSS. As shown in the snippet above, the <code>active</code> class is only used in the <em>third</em> list item element. As you can probably guess, this is the CSS class that you want to apply conditionally. To do that, you need to add a JavaScript object.</p>\n<h2 id=\"step2createyourclassbindings\">Step 2: Create Your Class Bindings</h2>\n<p>Let&#8217;s build on the code snippet shown in step 1. When creating class bindings in your template, there are two primary choices: using the object syntax or using the array syntax. I&#8217;m going to show you how to use both approaches in the remainder of this article.</p>\n<h3 id=\"bindingusingobjectsyntax\">Binding using object syntax</h3>\n<p>To create a class binding using the object syntax, you have to use a JavaScript <strong>expression</strong>. The expression we&#8217;ll be using can be seen in the code associated with this article <a href=\"https://codepen.io/ecofic/pen/VzYXMq\">here</a>. That relevant code looks like this:</p>\n<pre><code class=\"markup language-markup\">&lt;div id=\"myApp\"&gt;\r\n  &lt;nav aria-label=\"An example with pagination\"&gt;\r\n    &lt;ul class=\"pagination\"&gt;\r\n      &lt;li v-for=\"page in totalPages\" v-bind:class=\"{'page-item':true, 'active':(page === currentPage)}\"&gt;\r\n        &lt;a class=\"page-link\" href=\"#\"&gt;{{ page }}&lt;/a&gt;\r\n      &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/nav&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>I&#8217;ve reduced the amount of code by using Vue&#8217;s baked-in <code>v-for</code> directive. This directive is used to render items in a loop. The items in this example are the pages themselves. Beyond the use of the <code>v-for</code> directive, notice the use of the <code>v-bind</code> directive.</p>\n<p>The <code>v-bind</code> directive connects the element&#8217;s <code>class</code> attribute to the Vue instance. That instance of Vue is defined like this:</p>\n<pre><code class=\"jsx language-jsx\">var app = new Vue({\r\n  el: '#myApp',\r\n  data: {\r\n    totalPages: 5,\r\n    currentPage: 3\r\n  }\r\n});\r\n</code></pre>\n<p>This Vue instance is straight to the point. The <code>data</code> object above includes a property named <code>currentPage</code>. If you revisit the HTML template defined above, you&#8217;ll notice that this property is being referenced. In fact, the JavaScript object associated with each class binding looks something like this:</p>\n<pre><code class=\"jsx language-jsx\">{'page-item':true, 'active':(page === currentPage)}\r\n</code></pre>\n<p>This object defines two properties: <code>page-item</code> and <code>active</code>. Notably, these are the names of the two CSS classes discussed in Step 1. In Step 2, these two class references have become property names in a JavaScript object. The values associated with these property names are JavaScript expressions. If the expression evaluates as truthy, the CSS class will be included. If the expression evaluates to <code>false</code>, the CSS class will <em>not</em> be included. With these rules in mind, let&#8217;s look at each property.</p>\n<p>The first property, <code>page-item</code>, has a value of <code>true</code>. This hard-coded value is used because we always want to include the <code>page-item</code> class. The second property, <code>active</code>, uses a JavaScript expression. When this expression is <code>true</code>, the <code>active</code> class will be applied. This empowers us to conditionally apply the <code>active</code> class based on the value of <code>currentPage</code>. Another way to conditionally apply the <code>active</code> class is by binding to an <code>Array</code>.</p>\n<h3 id=\"bindingusingarraysyntax\">Binding using array syntax</h3>\n<p>Vue lets you apply a list of CSS classes by binding to an <code>Array</code>. If you wanted to use the <code>Array</code> syntax, the HTML shown in Step 1 would become this:</p>\n<pre><code class=\"markup language-markup\">&lt;div id=\"myApp\"&gt;\r\n  &lt;nav aria-label=\"An example with pagination\"&gt;\r\n    &lt;ul class=\"pagination\"&gt;\r\n        &lt;li v-for=\"page in totalPages\" v-bind:class=\"[pageItemClass, (page === currentPage) ? activeClass : '']\"&gt;  \r\n          &lt;a class=\"page-link\" href=\"#\"&gt;{{ page }}&lt;/a&gt;\r\n        &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/nav&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>A running version with the <code>Array</code> syntax can be seen <a href=\"https://codepen.io/ecofic/pen/JyXYvE\">here</a>. The only difference is the use of an <code>Array</code> on the class binding. This alternative approach expects two additional properties to exist in your Vue&#8217;s <code>data</code> object. Those two properties are: <code>pageItemClass</code> and <code>activeClass</code>. The updated Vue initialization code with these properties looks like this:</p>\n<pre><code class=\"jsx language-jsx\">var app = new Vue({\r\n  el: '#myApp',\r\n  data: {\r\n    totalPages: 5,\r\n    currentPage: 3,\r\n    pageItemClass: 'page-item',\r\n    activeClass: 'active'\r\n  }\r\n});\r\n</code></pre>\n<p>As you can see, the <code>data</code> object has grown in size, but the code in the template is slightly cleaner when using the <code>Array</code> syntax. The object syntax is a little bit more compact. The choice between the object syntax and the <code>Array</code> syntax comes down to personal preference.</p>\n<p>Both approaches may seem to make your HTML template more complicated. However, there’s actually more going on here. In reality, we&#8217;re separating concerns. We&#8217;re creating a template that is driven by data. This makes the view easier to test and easier to maintain as the app grows.</p>\n<h2 id=\"wrapup\">Wrap Up</h2>\n<p>I hope you found this article valuable. If you&#8217;d like to learn more about Vue.js, I hope you’ll check out the <a href=\"https://www.ecofic.com/courses/vue-getting-started/\">tutorial</a> I’ve created. I truly believe you&#8217;ll find it valuable, whether you’re learning Vue or have been working with it for a while. You can find me on Twitter <a href=\"https://twitter.com/chadcampbell\">@chadcampbell</a>. Once again, thank you!</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p><strong>There are times you need to change an element&#8217;s CSS classes at runtime. But when changing classes, it&#8217;s sometimes best to apply style details conditionally. For example, imagine your view has a pager. Pagers are often used to navigate larger sets of items. When navigating, it can be helpful to show the user the page they&#8217;re currently on. The style of the item is conditionally set, based on the current page that&#8217;s being viewed.</strong></p>\n<p>A pager in this case may look something like this:</p>\n<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/07/1501161191pager.png\" alt=\"Pager\" /></p>\n<p>In this example, there are five pages. Only one of these pages is selected at a time. If you built this pager with Bootstrap, the selected page would have a CSS class named <code>active</code> applied. You&#8217;d want this class applied only if the page was the currently viewed page. In other words, you&#8217;d want to <em>conditionally</em> apply the <code>active</code> CSS class. As discussed in my <a href=\"https://www.ecofic.com/courses/vue-getting-started/\">Vue.js tutorial</a>, Vue provides a way to conditionally apply a CSS class to an element. I&#8217;m going to show you this technique in this article.</p>\n<p>To conditionally apply a CSS class at runtime, you can bind to a JavaScript object. To successfully complete this task, you must complete two steps. First, you must ensure that your CSS class is defined. Then, you create the class bindings in your template. I&#8217;m going to explain each of these steps in detail in the rest of this article.</p>\n<h2 id=\"step1defineyourcssclasses\">Step 1: Define Your CSS Classes</h2>\n<p>Imagine, for a moment, that the five page items shown in the image above were defined using the following HTML:</p>\n<pre><code class=\"markup language-markup\">&lt;div id=\"myApp\"&gt;\r\n  &lt;nav aria-label=\"Page navigation example\"&gt;\r\n    &lt;ul class=\"pagination\"&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;1&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;2&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item active\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;3&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;4&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"page-item\"&gt;&lt;a class=\"page-link\" href=\"#\"&gt;5&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/nav&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Notice that each page in this code snippet has a list item element (<code>&lt;li …</code>). That element references the <code>page-item</code> CSS class. In the code for this article, this class is defined in the Bootstrap CSS framework. However, if it weren&#8217;t defined there, it would be your responsibility to ensure that it was defined somewhere. The second CSS class is the one that&#8217;s most relevant to this article, though.</p>\n<p>The <code>active</code> CSS class is used to identify the currently selected page. For this article, this CSS class is also defined in the Bootstrap CSS. As shown in the snippet above, the <code>active</code> class is only used in the <em>third</em> list item element. As you can probably guess, this is the CSS class that you want to apply conditionally. To do that, you need to add a JavaScript object.</p>\n",
    "protected": false
    },
    "author": 72592,
    "featured_media": 160331,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    407
    ],
    "tags": [
    6764,
    4477,
    9543,
    7829,
    8316
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160329"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/72592"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=160329"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/160329/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160331"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=160329"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=160329"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=160329"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    },
    {
    "id": 8649,
    "date": "2017-09-28T07:00:40",
    "date_gmt": "2017-09-28T14:00:40",
    "guid": {
    "rendered": "http://www.sitepoint.com/blogs/?p=8649"
    },
    "modified": "2017-09-29T00:00:49",
    "modified_gmt": "2017-09-29T07:00:49",
    "slug": "creative-commons-sources",
    "status": "publish",
    "type": "post",
    "link": "https://www.sitepoint.com/creative-commons-sources/",
    "title": {
    "rendered": "120+ Places To Find Creative Commons Media"
    },
    "content": {
    "rendered": "<p><strong>In this day and age, it seems everything online has a price associated with it. Whether you’re subscribing to a pay site for full articles or clicking on ads in a blog, everything online seems to have money associated with it. Luckily there&#8217;s still a large, and very healthy, movement online for media files listed under the <a href=\"http://creativecommons.org/about/licenses\">Creative Commons licenses</a>.</strong></p>\n\n<p>For those of you unfamiliar with the concept, these are files you can use in the creation of web sites and other media, free of charge. However, do be mindful that there are different degrees of the license, and some of them are for private use only, or they may require that you include an attribution to the original creator. Make sure to read and understand the various licenses, and which one each file you discover uses.</p>\n<p>When this article was first published in 2009, SitePoint had gathered over 30 of the best resources online for audio, video, images and more for use in your next project. As the years have passed, the Creative Commons movement has gained a lot of momentum. While a few of the sites in the initial list have gone silent, the new updated list boasts a much larger number of new entries.</p>\n<p>How large? Too large to go into full details for each entry. That&#8217;s why we will highlight, for each section, five websites we find most interesting, while the rest of the entries will follow in alphabetical order. All this being said, it&#8217;s time to get things rolling.</p>\n<h2 id=\"audio\">Audio</h2>\n<p>Free audio clips and songs essentially have a limitless number of uses, from playing in the background of videocasts, to being the opening theme to a podcast, or even just being used as a sound effect when users click on a link. Of all the resources out there, Creative Commons licensed music has the most potential uses for content creators and designers alike.</p>\n<p>The spread of media creation on YouTube, Vimeo and other platforms has raised the demand for quality audio clips that can be used by small content creators without losing the option to monetize their content. It&#8217;s no surprise these kinds of resources are very popular. The large number of new entries on our list proves it.</p>\n<h3 id=\"ccmixterorghttpccmixterorg\"><a href=\"http://ccmixter.org/\">ccMixter.org</a></h3>\n<p>ccMixter offers up thousands of Creative Commons licensed remixed songs in just about every genre available. Make sure to read each track&#8217;s info page to see just which version of the license it follows.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506563595cc-thumbs-ccmixster.png\" alt=\"ccMixter\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160285\" /></p>\n<h3 id=\"musopenhttpsmusopenorg\"><a href=\"https://musopen.org/\">MusOpen</a></h3>\n<p>MusOpen is the online repository for music in the public domain. The vast majority of the tracks are classic music with all the famous composers present in the lineup. There&#8217;s also a large collection of sheet music, as well as numerous music education resources.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506563655cc-thumbs-musopen.png\" alt=\"MusOpen\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160286\" /></p>\n<h3 id=\"fmafreemusicarchivehttpfreemusicarchiveorg\"><a href=\"http://freemusicarchive.org/\">FMA &#8211; Free Music Archive</a></h3>\n<p>The Free Music Archive is an interactive library of high-quality, legal audio downloads where all of the audio has been hand-picked by one of their established audio curators. Every MP3 you discover on The Free Music Archive is pre-cleared for certain types of uses that would otherwise be prohibited by copyright laws not designed for the digital era.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506563700cc-thumbs-fma.png\" alt=\"FMA\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160287\" /></p>\n<h3 id=\"teknoaxehttpteknoaxecom\"><a href=\"http://teknoaxe.com/\">TeknoAXE</a></h3>\n<p>TeknoAXE hosts a very large collection of music (over 1200), with new pieces added every week. All songs are distributed under CC 4.0 license and are free to use everywhere as long as one posts the attribution info.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506563742cc-thumbs-teknoaxe.png\" alt=\"TeknoAXE\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160288\" /></p>\n<h3 id=\"silvermansoundstudioshttpswwwsilvermansoundcom\"><a href=\"https://www.silvermansound.com/\">Silverman Sound Studios</a></h3>\n<p>Siverman Sound Studios is the place where musician Shane Ivers shares his music. You can browse through almost 100 free songs in various genres &#8212; all of them being offered under the <a href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506563782cc-thumbs-silverman.png\" alt=\"Silverman Sound Studios\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160289\" /></p>\n<h3 id=\"otherwebsitesofferingaudioresources\">Other websites offering audio resources</h3>\n<p>If you couldn&#8217;t find the tracks you wanted in the featured entries above, don&#8217;t despair. One can find plenty of audio tracks under Creative Commons license in the following websites (listed here in alphabetical order):</p>\n<ul>\n<li><a href=\"http://audionautix.com/\">Audionautix</a></li>\n<li><a href=\"http://www.bensound.com/\">Bensound</a></li>\n<li><a href=\"http://cctrax.com/\">CCTrax</a></li>\n<li><a href=\"http://www2.cpdl.org/wiki/index.php/Main_Page\">Choral Wiki</a></li>\n<li><a href=\"http://free-loops.com/\">Free-Loops.com</a></li>\n<li><a href=\"http://freesound.org/\">FreeSound.org</a></li>\n<li><a href=\"https://hearthis.at/creative-commons/\">Hearthis CC Collection</a></li>\n<li><a href=\"http://audio.ibeat.org/\">iBeat.org</a></li>\n<li><a href=\"http://incompetech.com/wordpress/\">Incompetech</a></li>\n<li><a href=\"https://www.jamendo.com/\">Jamendo</a></li>\n<li><a href=\"https://www.joshwoodward.com/\">Josh Woodward</a></li>\n<li><a href=\"http://www.mobygratis.com/\">Moby Gratis</a></li>\n<li><a href=\"http://www.opsound.org/\">OpsSound.org</a></li>\n<li><a href=\"http://sampleswap.org/\">Sample Swap</a></li>\n<li><a href=\"http://www.scottbuckley.com.au/library/\">Scott Buckley</a></li>\n<li><a href=\"http://sonnyboo.com/music/music.htm\">Sonny Boo</a></li>\n<li><a href=\"http://soundbible.com/royalty-free-sounds-1.html\">SoundBible Royalty Free Sound collection</a></li>\n<li><a href=\"https://www.soundclick.com/\">SoundClick</a></li>\n<li><a href=\"https://www.tribeofnoise.com/\">Tribe of Noise</a></li>\n</ul>\n<h2 id=\"generalsearches\">General Searches</h2>\n<p>While it’s great to have all of this Creative Commons media out there for people to use, finding it can be a whole different matter. Luckily, there are several sites that have come along to ease your pain and help you search for just the right files. While some, such as the Archive.org one, only search their site, their collection is so extensive, it&#8217;s still worth including.</p>\n<h3 id=\"creativecommonssearchhttpssearchcreativecommonsorg\"><a href=\"https://search.creativecommons.org/\">Creative Commons Search</a></h3>\n<p>The first stop in a generic CC search should be the search interface provided by the Creative Commons organization itself. While not a search engine in itself, this tool instead connects to various other search engines and resources in order to fetch the best result.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506563833cc-thumbs-ccsearch.png\" alt=\"CCSearch\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160290\" /></p>\n<p>They also provide a beta version of a new tool dedicated only to image search, which you can access at <a href=\"https://ccsearch.creativecommons.org/\">ccsearch.creativecommons.org</a>.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506563882cc-thumbs-ccsearchbeta.png\" alt=\"CCSearch Beta\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160291\" /></p>\n<h3 id=\"archiveorghttpsarchiveorg\"><a href=\"https://archive.org/\">Archive.org</a></h3>\n<p>Most people only think of Archive.org for the Wayback Machine, but it also offers up a huge selection of audio, video and text documents under the Creative Commons license.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568033cc-thumbs-archive.png\" alt=\"Archive.org\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160293\" /></p>\n<h3 id=\"wikimediacommonshttpscommonswikimediaorgwikimain_page\"><a href=\"https://commons.wikimedia.org/wiki/Main_Page\">Wikimedia Commons</a></h3>\n<p>Everyone knows about Wikipedia. Not that many people know about its Creative Commons section, Wikimedia Commons. This is a collection of over 40 million media files that may be freely reused subject to certain restrictions (in many cases). Be sure though to check the license details for each file to see how you can use it.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568100cc-thumbs-wikimedia.png\" alt=\"Wikimedia Commons\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160294\" /></p>\n<h3 id=\"letscchttpengletsccnet\"><a href=\"http://eng.letscc.net/\">Let&#8217;s CC</a></h3>\n<p>Let&#8217;s CC is a Korean website that acts as an interface to search for CC licensed files. It doesn&#8217;t have an index of its own, instead using other search engines like Flickr or YouTube. Just like in every other case, make sure to check the license details for each file.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568144cc-thumbs-letscc.png\" alt=\"Let&#039;s CC\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160295\" /></p>\n<h3 id=\"thepublicdomainprojectbypond5httpswwwpond5comfree\"><a href=\"https://www.pond5.com/free\">The Public Domain Project by Pond5</a></h3>\n<p>Pond5 initiated the Public Domain Project as a way to make historic media files available for your creative projects. With over 60 thousand files in the collection, it is a place worth checking.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568187cc-thumbs-pond5.png\" alt=\"The Public Domain Project\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160296\" /></p>\n<h3 id=\"mainstreamsearchengines\">Mainstream search engines</h3>\n<p>Of course, one doesn&#8217;t necessarily need a specialized tool to find Creative Commons resources. The same thing can be done using either of the mainstream search engine. No matter if you prefer Google, Bing, Yahoo or something else, add &#8220;Creative Commons&#8221; to any of your media search query and you should get some good results.</p>\n<h2 id=\"images\">Images</h2>\n<p>Back in 2009, finding free pictures under a Creative Commons license was a fairly daunting task, as most of the market was dominated by the stock photography sites. Fast forward several years and we find that this is the category of resources with the greatest growth. Where our initial list had 10 entries, the updated lineup has over 70 items. This makes the job of selecting 5 featured websites even more difficult, and it&#8217;s inevitable not everyone might agree with our pick.</p>\n<p>A special mention needs to be made to a subcategory of websites &#8212; the one author collections. Many photographers have chosen to offer their work under various flavors of Creative Commons license. In some cases, a few people pooled their images together for a larger collection. While the total number of pictures in each of these websites is not that large, you can find amazing shots that won&#8217;t be featured anywhere else.</p>\n<h3 id=\"flickrcreativecommonshttpswwwflickrcomcreativecommons\"><a href=\"https://www.flickr.com/creativecommons/\">Flickr Creative Commons</a></h3>\n<p>Flickr was, and still remains, the best place to find images licensed under Creative Commons. There are pre-filtered searches for each flavor of CC with results often numbering in the tens of millions. Some of the entries in the list below are powered by the Flickr API. This is definitely the first website you should visit if you&#8217;re searching for Creative Commons pictures.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568264cc-thumbs-flickrcc.png\" alt=\"Flickr Creative Commons\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160297\" /></p>\n<h3 id=\"unsplashhttpsunsplashcom\"><a href=\"https://unsplash.com/\">Unsplash</a></h3>\n<p>Unsplash is, without a doubt, the poster child of the free pictures movement that has taken the internet by storm over the last several years. What started in 2013 as a Tumblr site with 10 pictures leftover from a photoshoot is today a thriving community with over 200,000 images, more daily views than The New York Times, close to 100 million downloads, and partnerships with industry giants such as Apple.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568583cc-thumbs-unsplash.png\" alt=\"Unsplash\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160298\" /></p>\n<h3 id=\"500pxcreativecommonshttps500pxcomcreativecommons\"><a href=\"https://500px.com/creativecommons\">500px Creative Commons</a></h3>\n<p>500px is another community portal aiming to replace Flickr, as the latter has been fading out of public interest over the last decade. With over 12 million users, it looks like they can back up their claims. And just like Flickr, they offer similar predefined searches to make it easier for you to find out any images released under Creative Commons licenses.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568629cc-thumbs-500pxcc.png\" alt=\"500px Creative Commons\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160299\" /></p>\n<h3 id=\"pixabayhttpspixabaycom\"><a href=\"https://pixabay.com/\">Pixabay</a></h3>\n<p>Pixabay is another example of a thriving online community focused on sharing photos, illustrations, vector graphics and videos. Unlike Flickr and 500px, all content is exclusively available under <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\">CC0</a> &#8212; meaning they&#8217;re all part of the public domain. All submissions are screened and approved before being admitted, and there&#8217;s even an API for all you app developers out there.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568675cc-thumbs-pixabay.png\" alt=\"Pixabay\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160300\" /></p>\n<h3 id=\"libreshothttpslibreshotcom\"><a href=\"https://libreshot.com/\">Libreshot</a></h3>\n<p>Last of the featured spots goes to Libreshot. We&#8217;re dipping here into the growing pool of single-author websites &#8212; in this case that of Martin Vorel, from Prague, Czech Republic. There are several hundred pictures available, and you can view the most popular images over the last 24 hours, 30 days or from the beginning of the site.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568722cc-thumbs-libreshot.png\" alt=\"Libreshot\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160301\" /></p>\n<h3 id=\"otherwebsitesofferingcreativecommonsimages\">Other websites offering creative commons images</h3>\n<p>As promised above, we have here a very large list of websites, arranged in alphabetical order.</p>\n<ul>\n<li><a href=\"http://www.1millionfreepictures.com/\">1 Million Free Pictures</a></li>\n<li><a href=\"http://www.4freephotos.com/\">4 Free Photos</a></li>\n<li><a href=\"http://albumarium.com/\">Albumarium</a></li>\n<li><a href=\"http://animalphotos.info/\">Animal Photos</a></li>\n<li><a href=\"https://avopix.com/\">Avopix</a></li>\n<li><a href=\"http://photos.bucketlistly.com/\">BucketListly Photos</a></li>\n<li><a href=\"http://carpictures.cc/cars/photo/\">Car Pictures CC</a></li>\n<li><a href=\"https://www.clker.com/\">Clker</a></li>\n<li><a href=\"http://compfight.com/\">CompFight</a></li>\n<li><a href=\"http://creativity103.com/\">Creativity 103</a></li>\n<li><a href=\"http://cupcake.nilssonlee.se/\">Cupcake Nilson Lee</a></li>\n<li><a href=\"http://pdi.davalign.com/\">Davalign</a></li>\n<li><a href=\"https://www.dreamstime.com/free-photos\">Dreamstime Public Domain Photos</a></li>\n<li><a href=\"http://www.drstockphoto.com/\">DrStockPhoto</a></li>\n<li><a href=\"http://duion.com/art/main\">Duion</a></li>\n<li><a href=\"http://fancycrave.com/category/collections/free/\">Fancy Crave</a></li>\n<li><a href=\"http://finda.photo/\">FindAPhoto</a></li>\n<li><a href=\"https://www.focusfitness.net/stock-photos/#\">Focus Fitness</a></li>\n<li><a href=\"https://www.foodiesfeed.com/\">Foodies Feed</a></li>\n<li><a href=\"http://foter.com/\">Foter</a></li>\n<li><a href=\"https://free-images.com/\">Free Images</a></li>\n<li><a href=\"http://www.free-images.cc/\">Free Images CC</a></li>\n<li><a href=\"http://freeimagez.com/\">Free Imagez</a></li>\n<li><a href=\"http://freenaturestock.com/\">Free Nature Stock</a></li>\n<li><a href=\"http://www.freephotos.se/\">Free Photos SE</a></li>\n<li><a href=\"https://freevintageillustrations.com/\">Free Vintage Illustrations</a></li>\n<li><a href=\"http://www.freeqration.com/featured/\">Freeqration</a></li>\n<li><a href=\"http://www.fromoldbooks.org/\">From Old Books</a></li>\n<li><a href=\"http://www.geograph.org.uk/\">Geograph</a></li>\n<li><a href=\"http://www.gratisography.com/\">Gratisography</a></li>\n<li><a href=\"https://www.goodfreephotos.com/\">Good Free Photos</a></li>\n<li><a href=\"http://jaymantri.com/\">Jay Mantri</a></li>\n<li><a href=\"http://www.lifeofpix.com/\">Life of Pics</a></li>\n<li><a href=\"http://littlevisuals.co/\">Little Visuals</a></li>\n<li><a href=\"https://magdeleine.co/\">Magdeleine</a></li>\n<li><a href=\"http://www.marblepics.com/\">Marble Pics</a></li>\n<li><a href=\"https://mmtstock.com/\">MMT Stock</a></li>\n<li><a href=\"http://moveast.me/\">MovEast</a></li>\n<li><a href=\"http://www.mypublicdomainpictures.com/\">My Public Domain Pictures</a></li>\n<li><a href=\"https://negativespace.co/\">Negative Space</a></li>\n<li><a href=\"http://nos.twnsnd.co/\">New Old Stock</a></li>\n<li><a href=\"https://openclipart.org/\">Open Clipart</a></li>\n<li><a href=\"http://pdpics.com/\">PDPics</a></li>\n<li><a href=\"http://pdposter.weebly.com/\">PD Poster</a></li>\n<li><a href=\"https://www.pexels.com/\">Pexels</a></li>\n<li><a href=\"http://photoeverywhere.co.uk/\">Photo Everywhere</a></li>\n<li><a href=\"http://www.photosforclass.com/\">Photos for Class</a></li>\n<li><a href=\"http://www.photos-public-domain.com/\">Photos Public Domain</a></li>\n<li><a href=\"http://photopin.com/\">PhotoPin</a></li>\n<li><a href=\"http://www.phototeria.com/\">Phototeria</a></li>\n<li><a href=\"http://www.picdrome.com/\">PicDrome</a></li>\n<li><a href=\"http://pickupimage.com/\">Pickup Image</a></li>\n<li><a href=\"http://www.pixzoyd.com/\">PixZoid</a></li>\n<li><a href=\"https://plixs.com/\">Plixs</a></li>\n<li><a href=\"http://publicdomainarchive.com/\">Public Domain Archive</a></li>\n<li><a href=\"http://www.publicdomainfiles.com/\">Public Domain Files</a></li>\n<li><a href=\"http://www.public-domain-photos.com/\">Public Domain Photos</a></li>\n<li><a href=\"https://realgraphy.org/\">Real Graphy</a></li>\n<li><a href=\"https://skitterphoto.com/\">Skitter Photo</a></li>\n<li><a href=\"https://snappygoat.com/\">Snappy Goat</a></li>\n<li><a href=\"http://soul-photos.com/\">Soul Photos</a></li>\n<li><a href=\"http://www.splashbase.co/images?images=true\">Splash Base</a></li>\n<li><a href=\"http://startupstockphotos.com/\">Startup Stock Photos</a></li>\n<li><a href=\"https://stocksnap.io/\">Stock Snap</a></li>\n<li><a href=\"http://thestocks.im/\">The Stocks</a></li>\n<li><a href=\"http://www.topersphotos.com/\">Toper&#8217;s Photos</a></li>\n<li><a href=\"http://travelcoffeebook.com/\">Travel Coffee Book</a></li>\n<li><a href=\"http://viintage.com/\">Viintage</a></li>\n<li><a href=\"http://yeahstockphotos.com/\">Yeah! Stock Photos</a></li>\n<li><a href=\"http://www.wikihow.com/\">WikiHow</a></li>\n</ul>\n<h2 id=\"texts\">Texts</h2>\n<p>The use of the licensed texts can be a bit odd, but they&#8217;re great for pulling quotes and phrases from to go in site headers.</p>\n<h3 id=\"projectgutenberghttpswwwgutenbergorg\"><a href=\"https://www.gutenberg.org/\">Project Gutenberg</a></h3>\n<p>Project Gutenberg started in 1971 and can be safely considered the first digital repository of public-domain content. The philosophy behind the project is to make information, books and other materials available to the general public in forms a vast majority of the computers, programs and people can easily read, use, quote, and search.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568774cc-thumbs-gutenberg.png\" alt=\"Project Gutenberg\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160302\" /></p>\n<h3 id=\"intratexthttpwwwintratextcom\"><a href=\"http://www.intratext.com/\">Intratext</a></h3>\n<p>The IntraText library contains over 12 millions texts dating back as far as 900 B.C., and as recent as the 21st century. Make sure to check what license is used for each resource individually before using it.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568813cc-thumbs-intratext.png\" alt=\"Intratext\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160303\" /></p>\n<h3 id=\"wisdomcommonshttpwwwwisdomcommonsorg\"><a href=\"http://www.wisdomcommons.org/\">Wisdom Commons</a></h3>\n<p>The Wisdom Commons is a place to find and discuss information about virtues that human beings generally agree are important &#8212; like generosity, compassion and courage, and so on. This is backed up with several thousands quotes, poems, fables, essays and other similar works that are all free to use.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568856cc-thumbs-wisdom.png\" alt=\"Wisdom Commons\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160304\" /></p>\n<h3 id=\"thepublicdomainreviewhttppublicdomainrevieworg\"><a href=\"http://publicdomainreview.org/\">The Public Domain Review</a></h3>\n<p>The Public Domain Review is an online journal and not-for-profit project dedicated to the exploration of curious and compelling works from the history of art, literature, and ideas.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568914cc-thumbs-publicdomainreview.png\" alt=\"The Public Domain Review\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160305\" /></p>\n<h3 id=\"thecatalogofusgovernmentpublicationshttpscataloggpogov\"><a href=\"https://catalog.gpo.gov/\">The Catalog of U.S. Government Publications</a></h3>\n<p>The CGP is the finding tool for federal publications that includes descriptive information for historical and current publications as well as direct links to the full document, when available. Users can search by authoring agency, title, subject, and general keywords.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506568957cc-thumbs-cgp.png\" alt=\"The Catalog of U.S. Government Publications\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160306\" /></p>\n<h3 id=\"otherwebsitesofferingcreativecommonstextsbooksandpublications\">Other websites offering creative commons texts, books and publications</h3>\n<p>Just as before, here are some other websites leading to lesser-known caches of public domain and creative commons texts.</p>\n<ul>\n<li><a href=\"http://www.europeana.eu\">Europeana Collections</a></li>\n<li><a href=\"http://onlinebooks.library.upenn.edu/\">The Online Books Page</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Wikipedia:Public_domain_resources\">Wikipedia: Public Domain Resources</a></li>\n</ul>\n<h2 id=\"videos\">Videos</h2>\n<p>More and more of the web is turning to video, and online video viewing has hit an all time high. Nowadays, there&#8217;s a very large demand for quality stock video that&#8217;s free to use without paying a fortune for the right to do it. If you find yourself needing such videos, here&#8217;s where you should start searching.</p>\n<h3 id=\"vimeocreativecommonshttpsvimeocomcreativecommons\"><a href=\"https://vimeo.com/creativecommons\">Vimeo Creative Commons</a></h3>\n<p>Vimeo is aiming to be the second largest video community after YouTube. They back this position with one of the largest collections of Creative Commons licensed videos and by providing the tools to find these videos fast enough to matter.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506569014cc-thumbs-vimeo.png\" alt=\"Vimeo Creative Commons\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160307\" /></p>\n<h3 id=\"videvohttpswwwvidevonet\"><a href=\"https://www.videvo.net/\">Videvo</a></h3>\n<p>Videvo offers completely free stock video footage and motion graphics for use in any project. It boasts a collection of around 6000 clips and more are added every day. But be sure to check all the details of the license before you use the clips.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506569302cc-thumbs-videvo.png\" alt=\"Videvo\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160308\" /></p>\n<h3 id=\"pixabayhttpspixabaycom-1\"><a href=\"https://pixabay.com/\">Pixabay</a></h3>\n<p>We&#8217;ve featured Pixabay in the Images section and for good reason. We&#8217;re mentioning here again as it also boasts a great collection of video clips in HD and 4K resolution.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506569346cc-thumbs-pixabay-video.png\" alt=\"Pixabay\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160309\" /></p>\n<h3 id=\"flickrhttpswwwflickrcomsearchmediavideosadv1textvideoadvanced1license22c32c42c52c62c9\"><a href=\"https://www.flickr.com/search/?media=videos&amp;adv=1&amp;text=video&amp;advanced=1&amp;license=2%2C3%2C4%2C5%2C6%2C9\">Flickr</a></h3>\n<p>This list of featured websites must include Flickr and its over 95,000 videos licensed under Creative Commons. While most of them are amateur home made clips, you can find some hidden gems to use in your projects.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506569427cc-thumbs-flickr-video.png\" alt=\"Flickr CC Video\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160310\" /></p>\n<h3 id=\"openimageshttpswwwopenbeeldennl\"><a href=\"https://www.openbeelden.nl/\">Open Images</a></h3>\n<p>Open Images is an open media platform that offers online access to audiovisual archive material to stimulate creative reuse. Open Images also provides an API, making it easy to develop mashups. Access to the material on Open Images is provided under the Creative Commons licensing model.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/09/1506569474cc-thumbs-openimages.png\" alt=\"Open Images\" width=\"540\" height=\"300\" class=\"aligncenter size-full wp-image-160311\" /></p>\n<h3 id=\"otherwebsitesofferingcreativecommonsvideoresources\">Other websites offering creative commons video resources</h3>\n<p>Here are some more places where you can go searching for creative commons licensed video clips.</p>\n<ul>\n<li><a href=\"http://www.beachfrontbroll.com/\">Beachfront B-Roll</a></li>\n<li><a href=\"http://freestockfootagearchive.com/\">Free Stock Footage Archive</a></li>\n<li><a href=\"https://archive.org/details/opensource_movies\">Internet Archive Community Video</a></li>\n<li><a href=\"https://videos.pexels.com/\">Pexels Video</a></li>\n<li><a href=\"http://www.splashbase.co/images?videos=true\">Splash Base</a></li>\n</ul>\n<h2 id=\"wrappingthingsup\">Wrapping things up</h2>\n<p>Here we are at the end of our journey, with a huge list of new places to search for various Creative Commons resources. Hopefully this will make it a lot easier for you to find the right media for your projects.</p>\n",
    "protected": false
    },
    "excerpt": {
    "rendered": "<p>The number of images, audio files, movies and other files available under a Creative Commons license is enormous, as Sean demonstrates in this post.  Check out his list of over 30 useful sites for sourcing Creative Commons media.</p>\n",
    "protected": false
    },
    "author": 72093,
    "featured_media": 160314,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
    8572,
    422
    ],
    "tags": [
    3314,
    7829
    ],
    "_links": {
    "self": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/8649"
    }
    ],
    "collection": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts"
    }
    ],
    "about": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/types/post"
    }
    ],
    "author": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/users/72093"
    }
    ],
    "replies": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/comments?post=8649"
    }
    ],
    "version-history": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/posts/8649/revisions"
    }
    ],
    "wp:featuredmedia": [
    {
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media/160314"
    }
    ],
    "wp:attachment": [
    {
    "href": "https://www.sitepoint.com/wp-json/wp/v2/media?parent=8649"
    }
    ],
    "wp:term": [
    {
    "taxonomy": "category",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/categories?post=8649"
    },
    {
    "taxonomy": "post_tag",
    "embeddable": true,
    "href": "https://www.sitepoint.com/wp-json/wp/v2/tags?post=8649"
    }
    ],
    "curies": [
    {
    "name": "wp",
    "href": "https://api.w.org/{rel}",
    "templated": true
    }
    ]
    }
    }
]